// IMPORTING compass/utilities
// IMPORTING utilities/color
// IMPORTING color/contrast
// IMPORTING compass/utilities/color/brightness
// Computes the "brightness" of a color
//
// Brightness is similiar to lightness in HSL but more closely approximates
// how humans perceive the intensity of the different RGB components of
// a color. Brightness is sometimes called luminance.
//
// Returns a number between 0% and 100%, where 100% is fully bright
// (white) and 0% is fully dark (black) for color values.
//
// For numbers and percentages it returns the same value to be used
// in `@include filter(brightness(1.1))`.
@function brightness($color) {
  @if type-of($color) == color {
    @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
  }
  @else {
    @return unquote("brightness(#{$color})");
  }
}


$contrasted-dark-default:   #000 !default;
$contrasted-light-default:  #fff !default;

// Returns either the `$light` or `$dark` color
// by deciding which contrasts more with `$color`.
//
// E.g. This can be used to select the more readable foreground color
// for a given background color.
//
// `$dark` defaults to black and `$light` defaults to white.
//
// When `$color` is `null`, this function returns `null`.
@function contrast-color(
  $color,
  $dark: $contrasted-dark-default,
  $light: $contrasted-light-default,
  $threshold: null
) {
  @if $threshold {
    // Deprecated in Compass 0.13
    @warn "The $threshold argment to contrast-color is no longer needed and will be removed in the next release."
  }
  @if $color == null {
    @return null;
  }
  @else {
    $color-brightness: brightness($color);
    $dark-text-brightness: brightness($dark);
    $light-text-brightness: brightness($light);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}

// Sets the specified background color and calculates a dark or light
// contrasted text color.  The arguments are passed through to the
// [contrast-color function](#function-contrast-color).
@mixin contrasted(
  $background-color,
  $dark: $contrasted-dark-default,
  $light: $contrasted-light-default,
  $threshold: null
) {
  @if $threshold {
    // Deprecated in Compass 0.13
    @warn "The $threshold argment to contrasted is no longer needed and will be removed in the next release."
  }
  background-color: $background-color;
  color: contrast-color($background-color, $dark, $light);
}
// IMPORTING utilities/general
// IMPORTING general/reset
// This module has moved.
// IMPORTING compass/reset/utilities
// Based on [Eric Meyer's reset 2.0](http://meyerweb.com/eric/tools/css/reset/index.html)
// Global reset rules.
// For more specific resets, use the reset mixins provided below
@mixin global-reset {
  html, body, div, span, applet, object, iframe,
  h1, h2, h3, h4, h5, h6, p, blockquote, pre,
  a, abbr, acronym, address, big, cite, code,
  del, dfn, em, img, ins, kbd, q, s, samp,
  small, strike, strong, sub, sup, tt, var,
  b, u, i, center,
  dl, dt, dd, ol, ul, li,
  fieldset, form, label, legend,
  table, caption, tbody, tfoot, thead, tr, th, td,
  article, aside, canvas, details, embed, 
  figure, figcaption, footer, header, hgroup, 
  menu, nav, output, ruby, section, summary,
  time, mark, audio, video {
    @include reset-box-model;
    @include reset-font; }
  // Unlike Eric's original reset, we reset the html element to be compatible
  // with the vertical rhythm mixins.
  html {
    @include reset-body; }
  ol, ul {
    @include reset-list-style; }
  table {
    @include reset-table; }
  caption, th, td {
    @include reset-table-cell; }
  q, blockquote {
    @include reset-quotation; }
  a img {
    @include reset-image-anchor-border; }
  @include reset-html5; }

// Reset all elements within some selector scope. To reset the selector itself,
// mixin the appropriate reset mixin for that element type as well. This could be
// useful if you want to style a part of your page in a dramatically different way.
@mixin nested-reset {
  div, span, applet, object, iframe,
  h1, h2, h3, h4, h5, h6, p, blockquote, pre,
  a, abbr, acronym, address, big, cite, code,
  del, dfn, em, img, ins, kbd, q, s, samp,
  small, strike, strong, sub, sup, tt, var,
  b, u, i, center,
  dl, dt, dd, ol, ul, li,
  fieldset, form, label, legend,
  table, caption, tbody, tfoot, thead, tr, th, td,
  article, aside, canvas, details, embed, 
  figure, figcaption, footer, header, hgroup, 
  menu, nav, output, ruby, section, summary,
  time, mark, audio, video {
    @include reset-box-model;
    @include reset-font; }
  table {
    @include reset-table; }
  caption, th, td {
    @include reset-table-cell; }
  q, blockquote {
    @include reset-quotation; }
  a img {
    @include reset-image-anchor-border; } }

// Reset the box model measurements.
@mixin reset-box-model {
  margin: 0;
  padding: 0;
  border: 0; }

// Reset the font and vertical alignment.
@mixin reset-font {
  font: inherit;
  font-size: 100%;
  vertical-align: baseline; }

// Resets the outline when focus.
// For accessibility you need to apply some styling in its place.
@mixin reset-focus {
  outline: 0; }

// Reset a body element.
@mixin reset-body {
  line-height: 1; }

// Reset the list style of an element.
@mixin reset-list-style {
  list-style: none; }

// Reset a table
@mixin reset-table {
  border-collapse: collapse;
  border-spacing: 0; }

// Reset a table cell (`th`, `td`)
@mixin reset-table-cell {
  text-align: left;
  font-weight: normal;
  vertical-align: middle; }

// Reset a quotation (`q`, `blockquote`)
@mixin reset-quotation {
  quotes: none;
  &:before, &:after {
    content: ""; 
    content: none; } }

// Resets the border.
@mixin reset-image-anchor-border {
  border: none; }

// Unrecognized elements are displayed inline.
// This reset provides a basic reset for block html5 elements
// so they are rendered correctly in browsers that don't recognize them
// and reset in browsers that have default styles for them.
@mixin reset-html5 {
  #{elements-of-type(html5-block)} {
    display: block; } }

// Resets the display of inline and block elements to their default display
// according to their tag type. Elements that have a default display that varies across
// versions of html or browser are not handled here, but this covers the 90% use case.
// Usage Example:
//
//     // Turn off the display for both of these classes
//     .unregistered-only, .registered-only
//       display: none
//     // Now turn only one of them back on depending on some other context.
//     body.registered
//       +reset-display(".registered-only")
//     body.unregistered
//       +reset-display(".unregistered-only")
@mixin reset-display($selector: "", $important: false) {
  #{append-selector(elements-of-type("inline"), $selector)} {
    @if $important {
      display: inline !important; }
    @else {
      display: inline; } }
  #{append-selector(elements-of-type("block"), $selector)} {
    @if $important {
      display: block !important; }
    @else {
      display: block; } } }
// IMPORTING general/clearfix
// @doc off
// Extends the bottom of the element to enclose any floats it contains.
// @doc on

// IMPORTING hacks
// IMPORTING compass/support
// Map of compass extensions that are loaded. The value will either be
// the version of the extension or `true` if the version is unknown.
$compass-extensions: compass-extensions() !default;

// The list of browsers you want to support.
// Defaults to all.
$supported-browsers: browsers() !default;

// The browser usage threshold for features that gracefully degrade
// Defaults to 1 user in 1,000.
$graceful-usage-threshold: 0.1 !default;

// The browser usage threshold for features that cannot degrade gracefully
// Defaults to 1 user in 10,000.
$critical-usage-threshold: 0.01 !default;

// Set this to true to generate comments that will explain why a prefix was included or omitted.
$debug-browser-support: false !default;

// Minimum browser versions that must be supported.
// The keys of this map are any valid browser according to `browsers()`.
// The values of this map are the min version that is valid for that browser
// according to `browser-versions($browser)`
$browser-minimum-versions: (
  'chrome':  null,
  'firefox': null,
  'ie':      null,
  'safari':  null,
  'opera':   null
) !default;


// @private
$default-capability-options: (
  (full-support: true),
  (partial-support: true)
);

// When a prefix in in context, but there is no current prefix
// That context is recorded here so other prefixes can be avoided.
$prefix-context: null;

// When a prefix is in a selector or directive scope, this is set to the
// current prefix value.  When `null`, either there is no prefix in scope
// or the official prefix is being rendered. The `$prefix-context`
// variable can be used to make that distinction.
$current-prefix: null;

// When in a context that only exists in a particular version
// this variable is set to those versions.
$current-browser-versions: ();

// The legacy support CSS 2.1 Selectors.
// Defaults to the $critical-usage-threshold.
$css-sel2-support-threshold: $critical-usage-threshold !default;

// Check if the browser is in scope given the browser support and current prefix minimums.
@function browser-out-of-scope($browser, $version: null) {
  @if not index($supported-browsers, $browser) {
    @if $debug-browser-support {
      @return "#{$browser} is not listed as a supported browser."
    } @else {
      @return true;
    }
  } @else if not ($current-prefix == null or $current-prefix == browser-prefix($browser)) {
    @if $debug-browser-support {
      @return "#{$browser} #{$version} is incompatible with #{$current-prefix}."
    } @else {
      @return true;
    }
  }
  $current-range: map-get($current-browser-versions, $browser);
  $current-min: if($current-range, nth($current-range, 1), null);
  $current-max: if($current-range, nth($current-range, 2), null);
  @if not ($version and $current-max) {
    // We don't have any versions to compare
    @return false;
  } @else {
    // If the version is less than the current min, it is not supported
    $too-old: compare-browser-versions($browser, $version, $current-min) < 0;
    $too-new: compare-browser-versions($browser, $version, $current-max) > 0;
    @if $too-old or $too-new {
      @if $debug-browser-support {
        @return "The current scope only works with #{display-browser-range($browser, $current-min, $current-max)}.";
      } @else {
        @return true;
      }
    } @else {
      @return false;
    }
  }
}

// Check whether the browser is supported according to the supported browsers,
// declared minimum support and usage thresholds.
@function support-legacy-browser($browser, $min-version, $max-version: null, $threshold: $critical-usage-threshold) {
  @if not index($supported-browsers, $browser) {
    @return false;
  }
  // Check agaist usage stats and declared minimums
  $min-required-version: map-get($browser-minimum-versions, $browser);
  $usage: if($max-version,
             omitted-usage($browser, $min-version, $max-version),
             omitted-usage($browser, $min-version));
  @return $usage > $threshold or
          ($min-required-version and
           compare-browser-versions($browser, $max-version or $min-version, $min-required-version) >= 0);
}

// Include content for a legacy browser
// Version can be a single version string or a list of versions ordered from oldest to newest.
@mixin for-legacy-browser($browser, $min-version, $max-version: $min-version,
                          $threshold: $critical-usage-threshold,
                          $ranges: ($browser: $min-version $max-version)) {
  @if not browser-out-of-scope($browser, $max-version) and
      support-legacy-browser($browser, $min-version, $max-version, $threshold)
  {
    @if $debug-browser-support {
      /* Content for #{display-browser-range($browser, $min-version, $max-version)}.
      Min version: #{map-get($browser-minimum-versions, $browser) or unspecified}.
      User threshold to keep: #{$threshold}%. If #{display-browser-range($browser, $min-version, $max-version)} are omitted: #{omitted-usage($browser, $min-version, $max-version)}%. */
    }
    @include with-browser-ranges(intersect-browser-ranges($current-browser-versions, $ranges)) {
      @content;
    }
  } @else if $debug-browser-support and browser-out-of-scope($browser, $max-version) {
    /* Content for #{display-browser-range($browser, $min-version, $max-version)} omitted.
       Not allowed in the current scope: #{browser-out-of-scope($browser, $max-version)} */
  } @else if $debug-browser-support and not
             support-legacy-browser($browser, $min-version, $max-version, $threshold) {
    @if omitted-usage($browser, $min-version, $max-version) > $threshold {
      /* Content for #{display-browser-range($browser, $min-version, $max-version)} omitted.
         User threshold to keep: #{$threshold}%. If #{display-browser-range($browser, $min-version, $max-version)} and below are omitted: #{omitted-usage($browser, $min-version, $max-version)}%. */
    } @else {
      /* Content for #{display-browser-range($browser, $min-version, $max-version)} omitted.
         Minimum support is #{map-get($browser-minimum-versions, $browser)}. */
    }
  }
}

@function display-browser-range($browser, $min-version, $max-version: $min-version) {
  @return "#{unquote($browser)} #{unquote($min-version)}#{if($max-version != $min-version, unquote(' -') unquote($max-version), null)}";
}


// Renders the content once if any of the legacy browsers are supported.
// $browsers is a map of browser name to version ranges
@mixin for-legacy-browsers($browsers, $threshold: $critical-usage-threshold) {
  $rendered: false;
  @each $browser, $range in $browsers {
    @if not $rendered {
      @include for-legacy-browser($browser, $range..., $threshold: $threshold, $ranges: $browsers) {
        $rendered: true;
        @content;
      }
    }
  }
}

// If there's a prefix context in scope, this will only output the content if the prefix matches.
// Otherwise, sets the current prefix scope and outputs the content.
@mixin with-prefix($prefix) {
  @if $current-prefix or $prefix-context {
    @if $current-prefix == $prefix or $prefix-context == $prefix {
      @if $debug-browser-support {
        @if $prefix {
          /* content for #{$prefix} because #{$current-prefix or $prefix-context} is already in scope. */
        } @else {
          /* unprefixed content. #{$current-prefix or $prefix-context} is already in scope. */
        }
      }
      $old-prefix-context: $prefix-context;
      $old-prefix: $current-prefix;
      $prefix-context: $prefix-context or $current-prefix !global;
      $current-prefix: $prefix !global;
      @content;
      $prefix-context: $old-prefix-context !global;
      $current-prefix: $old-prefix !global;
    } @else if $prefix == null {
      $old-prefix-context: $prefix-context;
      $prefix-context: $prefix-context or $current-prefix !global;
      $current-prefix: null !global;
      @if $debug-browser-support {
        /* Content for official syntax. Prefix context is still #{$prefix-context}. */
      }
      @content;
      $current-prefix: $prefix-context !global;
      $prefix-context: $old-prefix-context !global;
    } @else if $debug-browser-support {
      /* Omitting content for #{$prefix} because #{$current-prefix} is already in scope. */
    }
  } @else {
    @if $debug-browser-support and $prefix {
      /* Creating new #{$prefix} context. */
    }
    $prefix-context: $prefix !global;
    $current-prefix: $prefix !global;
    @content;
    $current-prefix: null !global;
    $prefix-context: null !global;
  }
}

@function prefixes-for-capability($capability, $threshold, $capability-options: $default-capability-options) {
  $result: ();
  @each $prefix in browser-prefixes($supported-browsers) {
    $result: map-merge($result,
                      ($prefix: use-prefix($prefix, $capability, $threshold, $capability-options)));
  }
  @return $result;
}

// Yields to the mixin content once for each prefix required.
// The current prefix is set to the $current-prefix global for use by the included content.
// Also yields to the content once with $current-prefix set to null for the official version
// as long as there's not already a prefix in scope.
@mixin with-each-prefix($capability, $threshold, $capability-options: $default-capability-options) {
  @each $prefix, $should-use-prefix in prefixes-for-capability($capability, $threshold, $capability-options) {
    @if $should-use-prefix {
      @if $debug-browser-support and type-of($should-use-prefix) == list {
        /* Capability #{$capability} is prefixed with #{$prefix} because #{$should-use-prefix} is required. */
      } @else if $debug-browser-support and type-of($should-use-prefix) == number {
        /* Capability #{$capability} is prefixed with #{$prefix} because #{$should-use-prefix}% of users need it which is more than the threshold of #{$threshold}%. */
      }
      @include with-prefix($prefix) {
        @include with-browser-ranges($capability) {
          @content;
        }
      }
    } @else if $debug-browser-support {
      /* Capability #{$capability} is not prefixed with #{$prefix} because #{prefix-usage($prefix, $capability, $capability-options)}% of users are affected which is less than the threshold of #{$threshold}. */
    }
  }
  @include with-prefix(null) {
    @include with-browser-ranges($capability) {
      @content;
    }
  }
}

// Returns true if at least one browser-version pair in $subset-ranges
// is a higher (or same) version than the browser-version pairs in
// $ranges.
@function has-browser-subset($ranges, $subset-ranges) {
  $found-mismatch: false;
  @each $browser, $subset-range in $subset-ranges {
    $range: map-get($ranges, $browser);
    @if $range {
      $min-1: nth($subset-range, 1);
      $max-1: nth($subset-range, 2);
      $min-2: nth($range, 1);
      $max-2: nth($range, 2);
      @if (compare-browser-versions($browser, $min-2, $min-1) <= 0 and
           compare-browser-versions($browser, $min-1, $max-2) <= 0) or
          (compare-browser-versions($browser, $min-2, $max-1) <= 0 and
           compare-browser-versions($browser, $max-1, $max-2) <= 0) or
          (compare-browser-versions($browser, $min-1, $min-2) <= 0 and
           compare-browser-versions($browser, $max-1, $max-2) >= 0) or
          (compare-browser-versions($browser, $min-1, $min-2) >= 0 and
           compare-browser-versions($browser, $max-1, $max-2) <= 0) {
        @return true;
      } @else {
        $found-mismatch: true
      }
    }
  }
  @return not $found-mismatch;
}

// When the same browser is in both maps, then the minimum will be set
// to the maximum of the two minimum versions, and the maximum will be
// set to the minmum of the two maximum versions.
@function intersect-browser-ranges($ranges, $new-ranges) {
  @each $browser, $new-range in $new-ranges {
    $old-range: map-get($ranges, $browser);
    @if $old-range {
      $old-min: nth($old-range, 1);
      $old-max: nth($old-range, 2);
      $new-min: nth($new-range, 1);
      $new-max: nth($new-range, 2);
      $maximin: if(compare-browser-versions($browser, $old-min, $new-min) > 0,
                   $old-min, $new-min);
      $minimax: if(compare-browser-versions($browser, $old-max, $new-max) < 0,
                   $old-max, $new-max);
      $ranges: map-merge($ranges, ($browser: $maximin $minimax));
    } @else {
      $ranges: map-merge($ranges, ($browser: $new-range));
    }
  }
  @return $ranges;
}

// If passed a map, that will be the new browser ranges.
// Otherwise a range map will be created based on the given capability and prefix
// using the `browser-ranges($capability, $prefix)` function.
//
// If there are current ranges in scope and the new ranges have some overlap
// with the current, 
//
// If there is no overlap, then the content will not be rendered.
@mixin with-browser-ranges($capability, $prefix: $current-prefix) {
  $new-ranges: null;
  @if type-of($capability) == map {
    $new-ranges: $capability;
  } @else {
    $new-ranges: browser-ranges($capability, $prefix);
  }

  @if has-browser-subset($current-browser-versions, $new-ranges) {
    $old-ranges: $current-browser-versions;
    $current-browser-versions: intersect-browser-ranges($old-ranges, $new-ranges) !global;
    @content;
    $current-browser-versions: $old-ranges !global;
  } @else if $debug-browser-support {
    /* Excluding content because #{inspect($new-ranges)} is not included within
       #{inspect($current-browser-versions)} */
  }
}

// Returns true if the prefixed usage stats for the capability exceed the threshold
// or if the minimum version for a supported browser would require a prefix for the capability.
@function use-prefix($prefix, $capability, $threshold, $capability-options: $default-capability-options) {
  $usage: prefix-usage($prefix, $capability, $capability-options);
  @if $usage > $threshold {
    @return $usage;
  } @else {
    @each $browser in browsers($prefix) {
      @if index($supported-browsers, $browser) {
        $min-version: map-get($browser-minimum-versions, $browser);
        @if $min-version {
          $actual-prefix: browser-requires-prefix($browser, $min-version, $capability, $capability-options);
          @if $actual-prefix and $prefix == $actual-prefix {
            @return $browser $min-version;
          }
        }
      }
    }
  }
  @return false;
}

@function prefix-identifier($ident, $prefix: $current-prefix) {
  @return unquote("#{$prefix}#{if($prefix, '-', null)}#{$ident}");
}

// Output a property and value using the current prefix.
// It will be unprefixed if $current-prefix is null.
@mixin prefix-prop($property, $value, $prefix: $current-prefix) {
  #{prefix-identifier($property, $prefix)}: $value;
}

// Emit a set of properties with the prefix governed by the capability and usage threshold given.
//
// Example:
//
//     @include prefixed-properties(css-animation, $animation-support-threshold,
//       (animation-name: foo, animation-duration: 2s)
//     );
@mixin prefixed-properties($capability, $threshold, $properties, $capability-options: $default-capability-options) {
  @include with-each-prefix($capability, $threshold, $capability-options) {
    @each $prop, $value in $properties {
      @include prefix-prop($prop, $value);
    }
  }
}


// @private
@function warn-about-old-variables() {
  $old-variables-in-use: ();
  @each $old-variable-name in
        (legacy-support-for-ie, legacy-support-for-ie6, legacy-support-for-ie7,
         legacy-support-for-ie8, legacy-support-for-mozilla, legacy-support-for-webkit,
         experimental-support-for-mozilla, experimental-support-for-webkit,
         experimental-support-for-opera, experimental-support-for-microsoft,
         experimental-support-for-khtml, experimental-support-for-svg)
  {
    @if global-variable-exists($old-variable-name) {
      $old-variables-in-use: append($old-variables-in-use,
                                    unquote("$#{$old-variable-name}"), comma);
    }
  }
  @if length($old-variables-in-use) > 0 {
    @warn "Compass has changed how browser support is configured. " +
          "The following configuration variables " +
          "are no longer supported: #{$old-variables-in-use}." +
          "Details: http://compass-style.org/help/documentation/tuning-vendor-prefixes/"
  }
  @return $old-variables-in-use;
}

// @private
@function warn-about-pie-removal() {
  @if global-variable-exists(experimental-support-for-pie) {
    @warn "Compass no longer supports css3pie.";
  }
  @return true;
}

// Enable browser support debugging within the content block.
// Or you can enable it for the whole stylesheet by setting `$debug-browser-support` to true.
@mixin with-browser-support-debugging {
  $current-status: $debug-browser-support;
  $debug-browser-support: true !global;
  @content;
  $debug-browser-support: $current-status !global;
}

// Set a default value if the given arglist is empty
@function set-arglist-default($arglist, $default) {
  $default-index: index($arglist, default);
  @if $default-index {
    $arglist: set-nth($arglist, $default-index, $default)
  }
  @return if(length($arglist) > 0, $arglist, $default);
}


// @private
$old-variable-warnings-issued: warn-about-old-variables() !default;

// @private
$pie-removal-warning-issued: warn-about-pie-removal() !default;

// @private
@function warn-about-useless-prefix-arguments($moz: null, $webkit: null, $o: null, $khtml: null, $official: null) {
  @if $moz != null or $webkit != null or $o != null or $khtml != null or $official != null {
    @warn "Browser prefix arguments to this mixin are no longer used and " +
          "will be removed in the next release.";
  }
  @return true;
}

// coerce a list to be comma delimited or make a new, empty comma delimited list.
@function comma-list($list: ()) {
  @return join((), $list, comma);
}

// @private Returns the legacy value for a given box-model
// - Used by background-clip and -origin.
@function legacy-box($box) {
  $box: unquote($box);
  @if $box == padding-box { $box: padding; }
  @if $box == border-box { $box: border; }
  @if $box == content-box { $box: content; }
  @return $box;
}

// The legacy support threshold for has-layout.
// Defaults to the $critical-usage-threshold.
$has-layout-support-threshold: $critical-usage-threshold !default;

// The `zoom` approach generates less CSS but does not validate.
// Set this to `block` to use the display-property to hack the
// element to gain layout.
$default-has-layout-approach: zoom !default;

// This mixin causes an element matching the selector
// to gain the "hasLayout" property in internet explorer.
// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).
@mixin has-layout($approach: $default-has-layout-approach) {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    @if $approach == zoom {
      @include has-layout-zoom;
    } @else if $approach == block {
      @include has-layout-block;
    } @else {
      @warn "Unknown has-layout approach: #{$approach}";
      @include has-layout-zoom;
    }
  }
}

@mixin has-layout-zoom {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    *zoom: 1;
  }
}

@mixin has-layout-block {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    // This makes ie6 get layout
    display: inline-block;
    // and this puts it back to block
    & { display: block; }
  }
}


// The legacy support threshold for IE6 attribute hack.
// Defaults to the $critical-usage-threshold.
$ie6-attribute-hack-support-threshold: $critical-usage-threshold !default;

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).
@mixin bang-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    @warn "it's recommended to use the underscore-hack() mixin instead of bang-hack()";
    #{$property}: #{$value} !important;
    #{$property}: #{$ie6-value};
  }
}

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.paulirish.com/2009/browser-specific-css-hacks/)
@mixin underscore-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    #{$property}: #{$value};
    _#{$property}: #{$ie6-value};
  }
}

// This basic method is preferred for the usual case, when positioned
// content will not show outside the bounds of the container.
//
// Recommendations include using this in conjunction with a width.
// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)
@mixin clearfix {
  overflow: hidden;
  @include has-layout;
}

// This older method from Position Is Everything called
// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)
// has the advantage of allowing positioned elements to hang
// outside the bounds of the container at the expense of more tricky CSS.
@mixin legacy-pie-clearfix {
  &:after {
    content    : "\0020";
    display    : block;
    height     : 0;
    clear      : both;
    overflow   : hidden;
    visibility : hidden;
  }
  @include has-layout;
}

// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.
// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.
//
// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin pie-clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  @include has-layout;
}
// IMPORTING general/float

// The legacy support threshold for float.
// Defaults to the $critical-usage-threshold.
$legacy-float-support-threshold: $critical-usage-threshold !default;

// Implementation of float:left with fix for the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float-left {
  @include float(left); }

// Implementation of float:right with fix for the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float-right {
  @include float(right); }

// Direction independent float mixin that fixes the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float($side: left) {
  float: unquote($side);
  @if support-legacy-browser("ie", "6", $threshold: $legacy-float-support-threshold) {
    display: inline; } }

// Resets floated elements back to their default of `float: none` and defaults
// to `display: block` unless you pass `inline` as an argument
//
// Usage Example:
//
//     body.homepage
//       #footer li
//         +float-left
//     body.signup
//       #footer li
//         +reset-float
@mixin reset-float($display: block) {
  float: none;
  @if support-legacy-browser("ie", "6", $threshold: $legacy-float-support-threshold) {
    display: $display; } }
// IMPORTING general/tag-cloud
// Emits styles for a tag cloud
@mixin tag-cloud($base-size: 1em) {
  font-size: $base-size;
  line-height: 1.2 * $base-size;
  .xxs, .xs, .s, .l, .xl, .xxl {
    line-height: 1.2 * $base-size; }
  .xxs {
    font-size: $base-size / 2; }
  .xs {
    font-size: 2 * $base-size / 3; }
  .s {
    font-size: 3 * $base-size / 4; }
  .l {
    font-size: 4 * $base-size / 3; }
  .xl {
    font-size: 3 * $base-size / 2; }
  .xxl {
    font-size: 2 * $base-size; } }
// IMPORTING general/hacks

// The legacy support threshold for has-layout.
// Defaults to the $critical-usage-threshold.
$has-layout-support-threshold: $critical-usage-threshold !default;

// The `zoom` approach generates less CSS but does not validate.
// Set this to `block` to use the display-property to hack the
// element to gain layout.
$default-has-layout-approach: zoom !default;

// This mixin causes an element matching the selector
// to gain the "hasLayout" property in internet explorer.
// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).
@mixin has-layout($approach: $default-has-layout-approach) {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    @if $approach == zoom {
      @include has-layout-zoom;
    } @else if $approach == block {
      @include has-layout-block;
    } @else {
      @warn "Unknown has-layout approach: #{$approach}";
      @include has-layout-zoom;
    }
  }
}

@mixin has-layout-zoom {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    *zoom: 1;
  }
}

@mixin has-layout-block {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    // This makes ie6 get layout
    display: inline-block;
    // and this puts it back to block
    & { display: block; }
  }
}


// The legacy support threshold for IE6 attribute hack.
// Defaults to the $critical-usage-threshold.
$ie6-attribute-hack-support-threshold: $critical-usage-threshold !default;

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).
@mixin bang-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    @warn "it's recommended to use the underscore-hack() mixin instead of bang-hack()";
    #{$property}: #{$value} !important;
    #{$property}: #{$ie6-value};
  }
}

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.paulirish.com/2009/browser-specific-css-hacks/)
@mixin underscore-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    #{$property}: #{$value};
    _#{$property}: #{$ie6-value};
  }
}
// IMPORTING general/min

//**
// Cross browser min-height mixin.
@mixin min-height($value) {
  @include hacked-minimum(height, $value); }

//**
// Cross browser min-width mixin.
@mixin min-width($value) {
  @include hacked-minimum(width, $value); }

// @private This mixin is not meant to be used directly.
@mixin hacked-minimum($property, $value) {
  min-#{$property}: $value;
  @include underscore-hack($property, auto, $value); }
// IMPORTING utilities/sprites
// IMPORTING sprites/base
// Determines those states for which you want to enable magic sprite selectors
$sprite-selectors: hover, target, active, focus !default;

// Set the width and height of an element to the original
// dimensions of an image before it was included in the sprite.
@mixin sprite-dimensions($map, $sprite) {
  height: image-height(sprite-file($map, $sprite));
  width: image-width(sprite-file($map, $sprite));
}

// Set the background position of the given sprite `$map` to display the
// sprite of the given `$sprite` name. You can move the image relative to its
// natural position by passing `$offset-x` and `$offset-y`.
// The background-position will be returned in pixels. By passing `true
// for `$use_percentages`, you get percentages instead.
@mixin sprite-background-position($map, $sprite, $offset-x: 0, $offset-y: 0,
$use-percentages: false) {
  background-position: sprite-position($map, $sprite, $offset-x, $offset-y,
  $use-percentages);
}


// Determines if you want to include magic selectors in your sprites
$disable-magic-sprite-selectors: false !default;

// Set this to underscore if you prefer
$default-sprite-separator: "-" !default;

// Include the position and (optionally) dimensions of this `$sprite`
// in the given sprite `$map`. The sprite url should come from either a base
// class or you can specify the `sprite-url` explicitly like this:
//
//     background: $map no-repeat;
@mixin sprite($map, $sprite, $dimensions: false, $offset-x: 0, $offset-y: 0,
                             $use-percentages: false,
                             $use-magic-selectors: not $disable-magic-sprite-selectors,
                             $separator: $default-sprite-separator) {
  @include sprite-background-position($map, $sprite, $offset-x, $offset-y,
                                      $use-percentages);
  @if $dimensions {
    @include sprite-dimensions($map, $sprite);
  }
  @if $use-magic-selectors {
    @include sprite-selectors($map, $sprite, $sprite, $offset-x, $offset-y,
                              $use-percentages, $separator);
  }
}

// Include the selectors for the `$sprite` given the `$map` and the 
// `$full-sprite-name`
// @private
@mixin sprite-selectors($map, $sprite-name, $full-sprite-name, $offset-x: 0,
                        $offset-y: 0, $use-percentages: false,
                        $separator: $default-sprite-separator) {
  @each $state in $sprite-selectors {
    $sprite-class: "#{$full-sprite-name}#{$separator}#{$state}";
    @if sprite_has_selector($map, $sprite-name, $state) {
      @if sprite_has_valid_selector($sprite-class) {
        &:#{$state}, &.#{$sprite-class} {
            @include sprite-background-position($map, sprite_selector_file($map, $sprite-name, $state),
                                                $offset-x, $offset-y, $use-percentages);
        }
      }
    }
  }
}

// Generates a class for each space separated name in `$sprite-names`.
// The class will be of the form .<map-name>-<sprite-name>.
//
// If a base class is provided, then each class will extend it.
//
// If `$dimensions` is `true`, the sprite dimensions will specified.
// Positions are returned in pixel units. Set `$use_percentages` to true to
// instead get percentages.
@mixin sprites($map, $sprite-names, $base-class: false, $dimensions: false,
               $prefix: sprite-map-name($map), $offset-x: 0, $offset-y: 0,
               $use-percentages: false,
               $separator: $default-sprite-separator) {
  @each $sprite-name in $sprite-names {
    @if sprite_does_not_have_parent($map, $sprite-name) {
      $full-sprite-name: "#{$prefix}#{$separator}#{$sprite-name}";
      @if sprite_has_valid_selector($full-sprite-name) {
        .#{$full-sprite-name} {
          @if $base-class { @extend #{$base-class}; }
          @include sprite($map, $sprite-name, $dimensions, $offset-x, $offset-y, 
                          $use-percentages, $separator: $separator);
        }
      }
    }
  }
}
// IMPORTING sprites/sprite-img
// IMPORTING compass/typography/text/replacement

// Indicates the direction you prefer to move your text
// when hiding it.
//
// `left` is more robust, especially in older browsers.
// `right` seems have better runtime performance.
$hide-text-direction: left !default;

// Hides html text and replaces it with an image.
// If you use this on an inline element, you will need to change the display to block or inline-block.
// Also, if the size of the image differs significantly from the font size, you'll need to set the width and/or height.
//
// Parameters:
//
// * `img` -- the relative path from the project image directory to the image, or a url literal.
// * `x` -- the x position of the background image.
// * `y` -- the y position of the background image.
@mixin replace-text($img, $x: 50%, $y: 50%) {
  @include hide-text;
  background: {
    @if is-url($img) {
      image: $img;
    } @else {
      image: image-url($img);
    }
    repeat: no-repeat;
    position: $x $y;
  };
}

// Like the `replace-text` mixin, but also sets the width
// and height of the element according the dimensions of the image.
//
// If you set `$inline` to true, then an inline image (data uri) will be used.
@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {
  @include replace-text(if($inline, inline-image($img), $img), $x, $y);
  width: image-width($img);
  height: image-height($img);
}

// Hides text in an element so you can see the background.
//
// The direction indicates how the text should be moved out of view.
//
// See `$hide-text-direction` for more information and to set this globally
// for your application.
@mixin hide-text($direction: $hide-text-direction) {
  @if $direction == left {
    $approximate-em-value: 12px / 1em;
    $wider-than-any-screen: -9999em;
    text-indent: $wider-than-any-screen * $approximate-em-value;
    overflow: hidden;
    text-align: left;
  } @else {
    // slightly wider than the box prevents issues with inline-block elements
    text-indent: 110%;
    white-space: nowrap;
    overflow: hidden;
  }
  @include for-legacy-browsers((ie: "7"), $critical-usage-threshold) {
    //Text transform capitalize fixes text-replacement issue when used in a <button> element on ie7
    text-transform:capitalize;
  }
}

// Hides text in an element by squishing the text into oblivion.
// Use this if you need to hide text contained in an inline element
// but still have it read by a screen reader.
@mixin squish-text {
  font: 0/0 serif;
  text-shadow: none;
  color: transparent;
}

// @doc off
// Example 1:
//
//     a.twitter
//       +sprite-img("icons-32.png", 1)
//     a.facebook
//       +sprite-img("icons-32png", 2)
//
// Example 2:
//
//     a
//       +sprite-background("icons-32.png")
//       a.twitter
//         +sprite-column(1)
//       a.facebook
//         +sprite-row(2)
// @doc on

$sprite-default-size: 32px !default;

$sprite-default-margin: 0px !default;

$sprite-image-default-width: $sprite-default-size !default;

$sprite-image-default-height: $sprite-default-size !default;

// Sets all the rules for a sprite from a given sprite image to show just one of the sprites.
// To reduce duplication use a sprite-bg mixin for common properties and a sprite-select mixin for positioning.
@mixin sprite-img($img, $col, $row: 1, $width: $sprite-image-default-width, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {
  @include sprite-background($img, $width, $height);
  @include sprite-position($col, $row, $width, $height, $margin); 
}

// Sets rules common for all sprites, assumes you want a square, but allows a rectangular region.
@mixin sprite-background($img, $width: $sprite-default-size, $height: $width) {
  @include sprite-background-rectangle($img, $width, $height); 
}

// Sets rules common for all sprites, assumes a rectangular region.
@mixin sprite-background-rectangle($img, $width: $sprite-image-default-width, $height: $sprite-image-default-height) {
  background: image-url($img) no-repeat;
  width: $width;
  height: $height;
  overflow: hidden; 
}

// Allows horizontal sprite positioning optimized for a single row of sprites.
@mixin sprite-column($col, $width: $sprite-image-default-width, $margin: $sprite-default-margin) {
  @include sprite-position($col, 1, $width, 0px, $margin); 
}

// Allows vertical sprite positioning optimized for a single column of sprites.
@mixin sprite-row($row, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {
  @include sprite-position(1, $row, 0px, $height, $margin); 
}

// Allows vertical and horizontal sprite positioning from a grid of equal dimensioned sprites.
@mixin sprite-position($col, $row: 1, $width: $sprite-image-default-width, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {
  $x: ($col - 1) * -$width - ($col - 1) * $margin;
  $y: ($row - 1) * -$height - ($row - 1) * $margin;
  background-position: $x $y; 
}



// Similar to 'sprite-replace-text-with-dimensions' but does not autmaticly set the demensions
@mixin sprite-replace-text ($map, $sprite, $dimensions: false, $offset-x: 0, $offset-y: 0) {    
  @include hide-text;
  @include sprite($map, $sprite, $dimensions, $offset-x, $offset-y);
  background-image: $map;
  background-repeat: no-repeat;
}

// Similar to 'replace-text-with-dimensions' but with sprites
// To use, create your sprite and then pass it in the `$map` param
// The name of the image in the sprite folder should be `$img-name`
@mixin sprite-replace-text-with-dimensions ($map, $sprite, $offset-x: 0, $offset-y: 0){    
  @include sprite-replace-text ($map, $sprite, true, $offset-x, $offset-y);
}
// IMPORTING utilities/tables
// IMPORTING tables/alternating-rows-and-columns
@mixin alternating-rows-and-columns($even-row-color, $odd-row-color, $dark-intersection, $header-color: white, $footer-color: white) {
  th {
    background-color: $header-color;
    &.even, &:nth-child(2n) {
      background-color: $header-color - $dark-intersection; } }
  tr {
    &.odd, &:nth-child(2n+1) {
      td {
       background-color: $odd-row-color;
       &.even, &:nth-child(2n) {
         background-color: $odd-row-color - $dark-intersection; } } }
    }
  tr.even {
    td {
      background-color: $even-row-color;
      &.even, &:nth-child(2n) {
        background-color: $even-row-color - $dark-intersection; } } }
  tfoot {
    th, td {
      background-color: $footer-color;
      &.even, &:nth-child(2n) {
        background-color: $footer-color - $dark-intersection; } } } }
// IMPORTING tables/borders

@mixin outer-table-borders($width: 2px, $color: black) {
  border: $width solid $color;
  thead {
    th {
      border-bottom: $width solid $color; } }
  tfoot {
    th, td {
      border-top: $width solid $color; } }
  th {
    &:first-child #{if(support-legacy-browser(ie, "6"), ', &.first', null)} {
      border-right: $width solid $color; } } }

@mixin inner-table-borders($width: 2px, $color: black) {
  th, td {
    border: {
      right: $width solid $color;
      bottom: $width solid $color;
      left-width: 0;
      top-width: 0; };
    &:last-child {
      border-right-width: 0; }

    // IE8 ignores rules that are included on the same line as :last-child
    // see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details
    @if support-legacy-browser(ie, "8") {
      &.last {
        border-right-width: 0; } } }

  tbody, tfoot {
    tr:last-child {
      th, td {
        border-bottom-width: 0; } }
    @if support-legacy-browser(ie, "8") {
      tr.last {
        th, td {
          border-bottom-width: 0; } } } } }
// IMPORTING tables/scaffolding
@mixin table-scaffolding {
  th {
    text-align: center;
    font-weight: bold; }
  td,
  th {
    padding: 2px;
    &.numeric {
      text-align: right; } } }

// deprecated
// IMPORTING typography/links
// IMPORTING links/hover-link
// a link that only has an underline when you hover over it
@mixin hover-link {
  text-decoration: none;
  &:hover, &:focus {
    text-decoration: underline; } }
// IMPORTING links/link-colors
// Set all the colors for a link with one mixin call.
// Order of arguments is:
//
// 1. normal
// 2. hover
// 3. active
// 4. visited
// 5. focus
//
// Those states not specified will inherit.
// Mixin to an anchor link like so:
//     a
//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)

@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;
  @if $visited {
    &:visited {
      color: $visited; } }
  @if $focus {
    &:focus {
      color: $focus; } }
  @if $hover {
    &:hover {
      color: $hover; } }
  @if $active {
    &:active {
      color: $active; } } }
// IMPORTING links/unstyled-link
// A link that looks and acts like the text it is contained within
@mixin unstyled-link {
  color: inherit;
  text-decoration: inherit;
  cursor: inherit;
  &:active, &:focus {
    outline: none; } }
// IMPORTING typography/lists
// IMPORTING lists/horizontal-list
// Horizontal list layout module.
//
// Easy mode using simple descendant li selectors:
//
//   ul.nav
//     +horizontal-list
//
// Advanced mode:
// If you need to target the list items using a different selector then use
// +horizontal-list-container on your ul/ol and +horizontal-list-item on your li.
// This may help when working on layouts involving nested lists. For example:
//
//   ul.nav
//     +horizontal-list-container
//     > li
//       +horizontal-list-item

// IMPORTING bullets
// Turn off the bullet for an element of a list
@mixin no-bullet {
  list-style-image : none;
  list-style-type  : none;
  margin-left      : 0;
}

// turns off the bullets for an entire list
@mixin no-bullets {
  list-style: none;
  li { @include no-bullet; }
}

// Make a list(ul/ol) have an image bullet.
//
// The mixin should be used like this for an icon that is 5x7:
//
//     ul.pretty
//       +pretty-bullets("my-icon.png", 5px, 7px)
//
// Additionally, if the image dimensions are not provided,
// The image dimensions will be extracted from the image itself.
//
//     ul.pretty
//       +pretty-bullets("my-icon.png")
//
@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {
  margin-left: 0;
  li {
    padding-left: $padding;
    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;
    list-style-type: none;
  }
}
// IMPORTING compass/utilities/general/clearfix
// @doc off
// Extends the bottom of the element to enclose any floats it contains.
// @doc on


// This basic method is preferred for the usual case, when positioned
// content will not show outside the bounds of the container.
//
// Recommendations include using this in conjunction with a width.
// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)
@mixin clearfix {
  overflow: hidden;
  @include has-layout;
}

// This older method from Position Is Everything called
// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)
// has the advantage of allowing positioned elements to hang
// outside the bounds of the container at the expense of more tricky CSS.
@mixin legacy-pie-clearfix {
  &:after {
    content    : "\0020";
    display    : block;
    height     : 0;
    clear      : both;
    overflow   : hidden;
    visibility : hidden;
  }
  @include has-layout;
}

// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.
// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.
//
// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin pie-clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  @include has-layout;
}
// IMPORTING compass/utilities/general/reset
// This module has moved.
// IMPORTING compass/utilities/general/float

// The legacy support threshold for float.
// Defaults to the $critical-usage-threshold.
$legacy-float-support-threshold: $critical-usage-threshold !default;

// Implementation of float:left with fix for the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float-left {
  @include float(left); }

// Implementation of float:right with fix for the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float-right {
  @include float(right); }

// Direction independent float mixin that fixes the
// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)
@mixin float($side: left) {
  float: unquote($side);
  @if support-legacy-browser("ie", "6", $threshold: $legacy-float-support-threshold) {
    display: inline; } }

// Resets floated elements back to their default of `float: none` and defaults
// to `display: block` unless you pass `inline` as an argument
//
// Usage Example:
//
//     body.homepage
//       #footer li
//         +float-left
//     body.signup
//       #footer li
//         +reset-float
@mixin reset-float($display: block) {
  float: none;
  @if support-legacy-browser("ie", "6", $threshold: $legacy-float-support-threshold) {
    display: $display; } }

// Can be mixed into any selector that target a ul or ol that is meant
// to have a horizontal layout. Used to implement +horizontal-list.
@mixin horizontal-list-container {
  @include reset-box-model;
  @include clearfix; }

// Can be mixed into any li selector that is meant to participate in a horizontal layout.
// Used to implement +horizontal-list.
//
// :last-child is not fully supported
// see http://www.quirksmode.org/css/contents.html#t29 for the support matrix
//
// IE8 ignores rules that are included on the same line as :last-child
// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details
//
// Setting `$padding` to `false` disables the padding between list elements
@mixin horizontal-list-item($padding: 4px, $direction: left) {
  @include no-bullet;
  white-space: nowrap;
  @include float($direction);
  @if $padding {
    padding: {
      left: $padding;
      right: $padding;
    }
    &:first-child #{if(support-legacy-browser("ie", "6", $threshold: $css-sel2-support-threshold), ', &.first', '')} { padding-#{$direction}: 0; }
    &:last-child { padding-#{opposite-position($direction)}: 0; }
    @if support-legacy-browser("ie", "7", $threshold: $css-sel2-support-threshold) {
      &.last { padding-#{opposite-position($direction)}: 0; } }
  }
}

// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.
// This is not an inline list.
//
// Setting `$padding` to `false` disables the padding between list elements
@mixin horizontal-list($padding: 4px, $direction: left) {
  @include horizontal-list-container;
  li {
    @include horizontal-list-item($padding, $direction); } }
// IMPORTING lists/inline-list

// makes a list inline.
@mixin inline-list {
  list-style-type: none;
  &, & li {
    margin: 0;
    padding: 0;
    display: inline;
  }
}

// makes an inline list delimited with the passed string.
// Defaults to making a comma-separated list.
//
// Please make note of the browser support issues before using this mixin:
//
// use of `content` and `:after` is not fully supported in all browsers.
// See quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t15)
//
// `:last-child` is not fully supported.
// see quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t29).
//
// IE8 ignores rules that are included on the same line as :last-child
// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details

@mixin delimited-list($separator: ", ") {
  @include inline-list;
  li {
    &:after { content: $separator; }
    &:last-child {
      &:after { content: ""; }
    }
    @if support-legacy-browser("ie", "7", $threshold: $css-sel2-support-threshold) {
      &.last {
        &:after { content: ""; }
      }
    }
  }
}

// See [delimited-list](#mixin-delimited-list)
// @deprecated
@mixin comma-delimited-list {
  @warn "comma-delimited-list is deprecated. Please use delimited-list instead.";
  @include delimited-list;
}
// IMPORTING lists/inline-block-list
// Inline-Block list layout module.
//
// Easy mode using simple descendant li selectors:
//
//     ul.nav {
//       @import inline-block-list;
//     }
//
// Advanced mode:
// If you need to target the list items using a different selector then use
// `@include inline-block-list-container` on your ul/ol and
// `@include inline-block-list-item` on your li. This may help when working
// on layouts involving nested lists. For example:
//
//     ul.nav {
//       @include inline-block-list-container;
//       > li {
//         @include inline-block-list-item;
//       }
//     }

// IMPORTING horizontal-list
// Horizontal list layout module.
//
// Easy mode using simple descendant li selectors:
//
//   ul.nav
//     +horizontal-list
//
// Advanced mode:
// If you need to target the list items using a different selector then use
// +horizontal-list-container on your ul/ol and +horizontal-list-item on your li.
// This may help when working on layouts involving nested lists. For example:
//
//   ul.nav
//     +horizontal-list-container
//     > li
//       +horizontal-list-item


// Can be mixed into any selector that target a ul or ol that is meant
// to have a horizontal layout. Used to implement +horizontal-list.
@mixin horizontal-list-container {
  @include reset-box-model;
  @include clearfix; }

// Can be mixed into any li selector that is meant to participate in a horizontal layout.
// Used to implement +horizontal-list.
//
// :last-child is not fully supported
// see http://www.quirksmode.org/css/contents.html#t29 for the support matrix
//
// IE8 ignores rules that are included on the same line as :last-child
// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details
//
// Setting `$padding` to `false` disables the padding between list elements
@mixin horizontal-list-item($padding: 4px, $direction: left) {
  @include no-bullet;
  white-space: nowrap;
  @include float($direction);
  @if $padding {
    padding: {
      left: $padding;
      right: $padding;
    }
    &:first-child #{if(support-legacy-browser("ie", "6", $threshold: $css-sel2-support-threshold), ', &.first', '')} { padding-#{$direction}: 0; }
    &:last-child { padding-#{opposite-position($direction)}: 0; }
    @if support-legacy-browser("ie", "7", $threshold: $css-sel2-support-threshold) {
      &.last { padding-#{opposite-position($direction)}: 0; } }
  }
}

// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.
// This is not an inline list.
//
// Setting `$padding` to `false` disables the padding between list elements
@mixin horizontal-list($padding: 4px, $direction: left) {
  @include horizontal-list-container;
  li {
    @include horizontal-list-item($padding, $direction); } }
// IMPORTING compass/css3/inline-block

// The legacy support for inline-block.
// Defaults to the $graceful-usage-threshold.
$inline-block-support-threshold: $graceful-usage-threshold !default;

// Set `$inline-block-alignment` to `none` or `false` to disable the output
// of a vertical-align property in the inline-block mixin.
// Or set it to a legal value for `vertical-align` to change the default.
$inline-block-alignment: middle !default;

// Provides a cross-browser method to implement `display: inline-block;`
@mixin inline-block($alignment: $inline-block-alignment, $ie-alignment: auto) {
  // legacy support for VERY old firefox
  @if support-legacy-browser("firefox", "2", $threshold: $inline-block-support-threshold) {
    display: -moz-inline-stack;
  }
  // standard
  display: inline-block;
  @if $alignment and $alignment != none {
    vertical-align: $alignment;
  }
  // legacy IE support
  @if support-legacy-browser("ie", "7", $threshold: $inline-block-support-threshold) {
    @if $ie-alignment and $ie-alignment != none {
      *vertical-align: $ie-alignment;
    }
    *zoom: 1;
    *display: inline;
  }
}

// Can be mixed into any selector that target a ul or ol that is meant
// to have an inline-block layout. Used to implement `inline-block-list`.
@mixin inline-block-list-container {
  @include horizontal-list-container; }

// Can be mixed into any li selector that is meant to participate in a horizontal layout.
// Used to implement `inline-block-list`.
@mixin inline-block-list-item($padding: false) {
  @include no-bullet;
  @include inline-block;
  white-space: nowrap;
  @if $padding {
    padding: {
      left: $padding;
      right: $padding;
    };    
  }
}

// A list(ol,ul) that is layed out such that the elements are inline-block and won't wrap.
@mixin inline-block-list($padding: false) {
  @include inline-block-list-container;
  li {
    @include inline-block-list-item($padding); } }
// IMPORTING lists/bullets
// Turn off the bullet for an element of a list
@mixin no-bullet {
  list-style-image : none;
  list-style-type  : none;
  margin-left      : 0;
}

// turns off the bullets for an entire list
@mixin no-bullets {
  list-style: none;
  li { @include no-bullet; }
}

// Make a list(ul/ol) have an image bullet.
//
// The mixin should be used like this for an icon that is 5x7:
//
//     ul.pretty
//       +pretty-bullets("my-icon.png", 5px, 7px)
//
// Additionally, if the image dimensions are not provided,
// The image dimensions will be extracted from the image itself.
//
//     ul.pretty
//       +pretty-bullets("my-icon.png")
//
@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {
  margin-left: 0;
  li {
    padding-left: $padding;
    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;
    list-style-type: none;
  }
}
// IMPORTING typography/text
// IMPORTING text/ellipsis
// IMPORTING compass/css3/deprecated-support

// XXX Remove these
$experimental-support-for-mozilla: true !default;
$experimental-support-for-webkit: true !default;
$experimental-support-for-opera: true !default;
$experimental-support-for-microsoft: true !default;
$experimental-support-for-khtml: false !default;
$experimental-support-for-svg: false !default;
$legacy-support-for-ie6: true !default;
$legacy-support-for-ie7: true !default;
$legacy-support-for-ie8: true !default;
$legacy-support-for-mozilla: true !default;
$legacy-support-for-webkit: true !default;

// This mixin provides basic support for CSS3 properties and
// their corresponding experimental CSS2 properties when
// the implementations are identical except for the property
// prefix.
@mixin experimental($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }
  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }
  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }
  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }
  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }
  @if $official                                        {         #{$property} : $value; }
}

// This mixin is a shortcut for applying only a single experimental value
@mixin experimental-only-for($property, $value,
  $moz      : false,
  $webkit   : false,
  $o        : false,
  $ms       : false,
  $khtml    : false,
  $official : false
) {
  @include experimental($property, $value, $moz, $webkit, $o, $ms, $khtml, $official);
}

// Same as experimental(), but for cases when the property is the same and the value is vendorized
@mixin experimental-value($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }
  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }
  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }
  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }
  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }
  @if $official                                        { #{$property} :         #{$value}; }
}

// @private
// Check a given support list for support of a particular browser
@function supported(
  $prefix,
  $support-list
) {
  $keys: moz, webkit, o, ms, khtml, official;
  $index: index($keys, $prefix);

  @if $index {
    @if $index == 6 and length($support-list) == 5 {
      @return official;
    } @else {
      @return nth($support-list, $index);
    }
  } @else {
    @warn 'Please pass a valid browser for $prefix: moz, webkit, o, ms, khtml, or official.';
  }
}

// A debug tool for checking browser support
@mixin debug-support-matrix($experimental: true, $ie: true) {
  @debug  #{'$moz-'}$experimental-support-for-mozilla
          #{'$webkit-'}$experimental-support-for-webkit
          #{'$opera-'}$experimental-support-for-opera
          #{'$microsoft-'}$experimental-support-for-microsoft
          #{'$khtml-'}$experimental-support-for-khtml;
  @debug  #{'$ie6-'}$legacy-support-for-ie6
          #{'$ie7-'}$legacy-support-for-ie7
          #{'$ie8-'}$legacy-support-for-ie8;
}

// Capture the current exerimental support settings
@function capture-experimental-matrix() {
  @return $experimental-support-for-mozilla
          $experimental-support-for-webkit
          $experimental-support-for-opera
          $experimental-support-for-microsoft
          $experimental-support-for-khtml;
}

// Capture the current legacy-ie support settings
@function capture-legacy-ie-matrix() {
  @return $legacy-support-for-ie6
          $legacy-support-for-ie7
          $legacy-support-for-ie8;
}

// Capture and store support
$experimental-matrix: capture-experimental-matrix();
$legacy-ie-matrix: capture-legacy-ie-matrix();

@mixin capture-experimental-matrix {
  $experimental-matrix: capture-experimental-matrix();
}

@mixin capture-legacy-ie-matrix {
  $legacy-ie-matrix: capture-legacy-ie-matrix();
}

@mixin capture-support-matrix {
  @include capture-experimental-matrix;
  @include capture-legacy-ie-matrix;
}

// Change the experimental-support settings in specific contexts.
@mixin set-experimental-support(
  $moz    : false,
  $webkit : false,
  $o      : false,
  $ms     : false,
  $khtml  : false
) {
  $experimental-support-for-mozilla   : $moz;
  $experimental-support-for-webkit    : $webkit;
  $experimental-support-for-opera     : $o;
  $experimental-support-for-microsoft : $ms;
  $experimental-support-for-khtml     : $khtml;
}

@mixin capture-and-set-experimental(
  $moz    : false,
  $webkit : false,
  $o      : false,
  $ms     : false,
  $khtml  : false
) {
  @include capture-experimental-matrix;
  @include set-experimental-support($moz, $webkit, $o, $ms, $khtml);
}

@mixin capture-and-adjust-experimental(
  $moz    : $experimental-support-for-mozilla,
  $webkit : $experimental-support-for-webkit,
  $o      : $experimental-support-for-opera,
  $ms     : $experimental-support-for-microsoft,
  $khtml  : $experimental-support-for-khtml
) {
  @include capture-experimental-matrix;
  @include set-experimental-support($moz, $webkit, $o, $ms, $khtml);
}

// Change the legacy-support-for-ie* settings in specific contexts.
@mixin set-legacy-ie-support(
  $ie6: false,
  $ie7: false,
  $ie8: false
) {
  $legacy-support-for-ie6: $ie6;
  $legacy-support-for-ie7: $ie7;
  $legacy-support-for-ie8: $ie8;
}

@mixin capture-and-set-legacy-ie(
  $ie6: false,
  $ie7: false,
  $ie8: false
) {
  @include capture-legacy-ie-matrix;
  @include set-legacy-ie-support($ie6, $ie7, $ie8);
}

@mixin capture-and-adjust-legacy-ie(
  $ie6: $legacy-support-for-ie6,
  $ie7: $legacy-support-for-ie7,
  $ie8: $legacy-support-for-ie8
) {
  @include capture-and-set-legacy-ie($ie6, $ie7, $ie8);
}

// Capture current browser support matrix, and set a new matrix of support.
@mixin capture-and-set-support(
  $moz    : false,
  $webkit : false,
  $o      : false,
  $ms     : false,
  $khtml  : false,
  $ie6    : false,
  $ie7    : false,
  $ie8    : false
) {
  // Capture the current state
  @include capture-support-matrix;

  // Change support settings
  @include set-experimental-support($moz, $webkit, $o, $ms, $khtml);
  @include set-legacy-ie-support($ie6, $ie7, $ie8);
}

// Capture current browser support matrix, and set a new matrix of support.
@mixin capture-and-adjust-support(
  $moz        : $experimental-support-for-mozilla,
  $webkit     : $experimental-support-for-webkit,
  $o          : $experimental-support-for-opera,
  $ms         : $experimental-support-for-microsoft,
  $khtml      : $experimental-support-for-khtml,
  $ie6        : $legacy-support-for-ie6,
  $ie7        : $legacy-support-for-ie7,
  $ie8        : $legacy-support-for-ie8
) {
  @include capture-and-set-support($moz, $webkit, $o, $ms, $khtml, $ie6, $ie7, $ie8);
}


// This mixin allows you to change the experimental support settings for
// child (@content) styles.
@mixin with-only-support-for(
  $moz    : false,
  $webkit : false,
  $o      : false,
  $ms     : false,
  $khtml  : false,
  $ie6    : false,
  $ie7    : false,
  $ie8    : false
) {
  // Capture current state
  $wo-experimental-matrix : capture-experimental-matrix();
  $wo-legacy-ie-matrix    : capture-legacy-ie-matrix();

  // Set new states
  @include set-experimental-support($moz, $webkit, $o, $ms, $khtml);
  @include set-legacy-ie-support($ie6, $ie7, $ie8);

  // Apply styles
  @content;

  // Return to original support settings
  @include set-experimental-support($wo-experimental-matrix...);
  @include set-legacy-ie-support($wo-legacy-ie-matrix...);
}

// This mixin is a shortcut for making slight adjustments to browser support
// for child (@content) styles
@mixin adjust-support-for(
    $moz        : $experimental-support-for-mozilla,
    $webkit     : $experimental-support-for-webkit,
    $o          : $experimental-support-for-opera,
    $ms         : $experimental-support-for-microsoft,
    $khtml      : $experimental-support-for-khtml,
    $ie6        : $legacy-support-for-ie6,
    $ie7        : $legacy-support-for-ie7,
    $ie8        : $legacy-support-for-ie8
) {
  @include with-only-support-for($moz, $webkit, $o, $ms, $khtml, $ie6, $ie7, $ie8) {
    @content;
  }
}

// To get full firefox support, you must install the ellipsis pattern:
//
//     compass install compass/ellipsis
$use-mozilla-ellipsis-binding: false !default;

// This technique, by [Justin Maxwell](http://code404.com/), was originally
// published [here](http://mattsnider.com/css/css-string-truncation-with-ellipsis/).
// Firefox implementation by [Rikkert Koppes](http://www.rikkertkoppes.com/thoughts/2008/6/).
@mixin ellipsis($no-wrap: true) {
  @if $no-wrap { white-space: nowrap; }
  overflow: hidden;
  @include experimental(text-overflow, ellipsis,
    not -moz,
    not -webkit,
    -o,
    -ms,
    not -khtml,
    official
  );
  @if $legacy-support-for-mozilla and $use-mozilla-ellipsis-binding {
    -moz-binding: stylesheet-url(unquote("xml/ellipsis.xml#ellipsis"));
  }
}
// IMPORTING text/nowrap
// When remembering whether or not there's a hyphen in white-space is too hard
@mixin nowrap { white-space: nowrap; }
// IMPORTING text/replacement

// Indicates the direction you prefer to move your text
// when hiding it.
//
// `left` is more robust, especially in older browsers.
// `right` seems have better runtime performance.
$hide-text-direction: left !default;

// Hides html text and replaces it with an image.
// If you use this on an inline element, you will need to change the display to block or inline-block.
// Also, if the size of the image differs significantly from the font size, you'll need to set the width and/or height.
//
// Parameters:
//
// * `img` -- the relative path from the project image directory to the image, or a url literal.
// * `x` -- the x position of the background image.
// * `y` -- the y position of the background image.
@mixin replace-text($img, $x: 50%, $y: 50%) {
  @include hide-text;
  background: {
    @if is-url($img) {
      image: $img;
    } @else {
      image: image-url($img);
    }
    repeat: no-repeat;
    position: $x $y;
  };
}

// Like the `replace-text` mixin, but also sets the width
// and height of the element according the dimensions of the image.
//
// If you set `$inline` to true, then an inline image (data uri) will be used.
@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {
  @include replace-text(if($inline, inline-image($img), $img), $x, $y);
  width: image-width($img);
  height: image-height($img);
}

// Hides text in an element so you can see the background.
//
// The direction indicates how the text should be moved out of view.
//
// See `$hide-text-direction` for more information and to set this globally
// for your application.
@mixin hide-text($direction: $hide-text-direction) {
  @if $direction == left {
    $approximate-em-value: 12px / 1em;
    $wider-than-any-screen: -9999em;
    text-indent: $wider-than-any-screen * $approximate-em-value;
    overflow: hidden;
    text-align: left;
  } @else {
    // slightly wider than the box prevents issues with inline-block elements
    text-indent: 110%;
    white-space: nowrap;
    overflow: hidden;
  }
  @include for-legacy-browsers((ie: "7"), $critical-usage-threshold) {
    //Text transform capitalize fixes text-replacement issue when used in a <button> element on ie7
    text-transform:capitalize;
  }
}

// Hides text in an element by squishing the text into oblivion.
// Use this if you need to hide text contained in an inline element
// but still have it read by a screen reader.
@mixin squish-text {
  font: 0/0 serif;
  text-shadow: none;
  color: transparent;
}
// IMPORTING text/force-wrap
// Prevent long urls and text from breaking layouts
// [originally from perishablepress.com](http://perishablepress.com/press/2010/06/01/wrapping-content/)
@mixin force-wrap {
  white-space: pre;           // CSS 2.0
  white-space: pre-wrap;      // CSS 2.1
  white-space: pre-line;      // CSS 3.0
  white-space: -pre-wrap;     // Opera 4-6
  white-space: -o-pre-wrap;   // Opera 7
  white-space: -moz-pre-wrap; // Mozilla
  white-space: -hp-pre-wrap;  // HP Printers
  word-wrap: break-word;      // IE 5+
}
// IMPORTING compass/typography
// IMPORTING typography/vertical_rhythm
// IMPORTING compass/layout/grid-background
// IMPORTING compass/css3/images
// IMPORTING compass/utilities/general/hacks

// The legacy support threshold for has-layout.
// Defaults to the $critical-usage-threshold.
$has-layout-support-threshold: $critical-usage-threshold !default;

// The `zoom` approach generates less CSS but does not validate.
// Set this to `block` to use the display-property to hack the
// element to gain layout.
$default-has-layout-approach: zoom !default;

// This mixin causes an element matching the selector
// to gain the "hasLayout" property in internet explorer.
// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).
@mixin has-layout($approach: $default-has-layout-approach) {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    @if $approach == zoom {
      @include has-layout-zoom;
    } @else if $approach == block {
      @include has-layout-block;
    } @else {
      @warn "Unknown has-layout approach: #{$approach}";
      @include has-layout-zoom;
    }
  }
}

@mixin has-layout-zoom {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    *zoom: 1;
  }
}

@mixin has-layout-block {
  @if support-legacy-browser("ie", "7", $threshold: $has-layout-support-threshold) {
    // This makes ie6 get layout
    display: inline-block;
    // and this puts it back to block
    & { display: block; }
  }
}


// The legacy support threshold for IE6 attribute hack.
// Defaults to the $critical-usage-threshold.
$ie6-attribute-hack-support-threshold: $critical-usage-threshold !default;

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).
@mixin bang-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    @warn "it's recommended to use the underscore-hack() mixin instead of bang-hack()";
    #{$property}: #{$value} !important;
    #{$property}: #{$ie6-value};
  }
}

// A hack to supply IE6 (and below) with a different property value.
// [Read more](http://www.paulirish.com/2009/browser-specific-css-hacks/)
@mixin underscore-hack($property, $value, $ie6-value) {
  @if support-legacy-browser("ie", "6", $threshold: $ie6-attribute-hack-support-threshold) {
    #{$property}: #{$value};
    _#{$property}: #{$ie6-value};
  }
}

$gradient-support-threshold: $graceful-usage-threshold !default;
$svg-gradient-shim-threshold: $graceful-usage-threshold !default;
$border-image-support-threshold: $graceful-usage-threshold !default;
$owg-threshold: $graceful-usage-threshold !default;

// Compass assumes you will use the official gradient syntax,
// unless otherwise instructed.
$use-legacy-gradient-syntax: false !default;

// Create a linear gradient using standard official or legacy syntax.
// This function must be included in one of the following
// image module mixins to work properly.
@function linear-gradient($angle, $details...) {
  $legacy-syntax: $use-legacy-gradient-syntax;

  @if type-of($angle) != 'number' {
    $angle: compact($angle);
    $legacy-syntax: if(index($angle, 'to'), false, true);
  }

  @if $legacy-syntax {
    @return _linear-gradient_legacy($angle, $details...);
  } @else {
    @return _linear-gradient($angle, $details...);
  }
}

// These browsers support svg but not gradients
// so we can shim the gradient with an inline svg file.
$browsers-supporting-svg-but-not-gradients: (ie: "9", opera: "9.5-9.6");

// These browsers require the old webkit gradient syntax
$browsers-supporting-old-webkit-gradients: (android: ("2.1", "3"));

@mixin each-gradient-prefix($values) {
  @if prefixed(-svg, $values) {
    @include for-legacy-browsers($browsers-supporting-svg-but-not-gradients,
                                 $svg-gradient-shim-threshold)
    {
      @include with-prefix(-svg) {
        @content;
      }
    }
  }
  @if prefixed(-owg, $values) {
    @include for-legacy-browsers($browsers-supporting-old-webkit-gradients,
                                 $owg-threshold)
    {
      @include with-prefix(-owg) {
        @content;
      }
    }
  }
  @include with-each-prefix(css-gradients, $gradient-support-threshold) {
    @if $current-prefix {
      @if prefixed($current-prefix, $values) {
        @content;
      } @else if $debug-browser-support {
        /* There is not a value that needs to be prefixed with #{$current-prefix} in: #{$values} */
      }
    } @else {
      @content;
    }
  }
}

@mixin image-property($property, $values...) {
  @include each-gradient-prefix($values) {
    @if $current-prefix {
      #{$property}: prefix($current-prefix, $values);
    } @else {
      #{$property}: $values;
    }
    @content;
  }
}

// Background property support for vendor prefixing within values.
@mixin background($backgrounds...) {
  @include image-property(background, $backgrounds...);
}

// Set any number of background layers, along with a fallback.
// The final argument will be output separately, first, as a css2 fallback.
@mixin background-with-css2-fallback($backgrounds...) {
  @if length($backgrounds) > 1 or prefixed(-css2, $backgrounds) {
    background: -css2(nth($backgrounds, -1));
  }
  @include background($backgrounds...);
}


// Background image property support for vendor prefixing within values.
@mixin background-image($images...) {
  @include image-property(background-image, $images...) {
    @if $current-prefix == -svg {
      background-size: 100%;
    }
  }
}

// Emit a IE-Specific filters that renders a simple linear gradient.
// For use in IE 6 - 8. Best practice would have you apply this via a
// conditional IE stylesheet, but if you must, you should place this before
// any background-image properties that you have specified.
//
// For the `$orientation` parameter, you can pass `vertical` or `horizontal`.
@mixin filter-gradient(
  $start-color,
  $end-color,
  $orientation: vertical
) {
  @include for-legacy-browsers((ie: "8"), $gradient-support-threshold) {
    @include has-layout;
    $gradient-type: if($orientation == vertical, 0, 1);
    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');
  }
}


// Border image property support for vendor prefixing properties and values.
@mixin border-image($value) {
  @include with-each-prefix(border-image, $border-image-support-threshold) {
    $border-prefix: $current-prefix;
    @include each-gradient-prefix($value) {
      @if $current-prefix and prefixed($current-prefix, $value) {
        $legacy-value: reject($value, fill);
        @include prefix-prop(border-image, prefix($current-prefix, $legacy-value), $prefix: $border-prefix);
      } @else {
        @include prefix-prop(border-image, $value, $prefix: $border-prefix);
      }
    }
  }
}

// List style image property support for vendor prefixing within values.
@mixin list-style-image($image) {
  @include image-property(list-style-image, $image);
}

// List style property support for vendor prefixing within values.
@mixin list-style($value) {
  @include image-property(list-style, $value);
}

// content property support for vendor prefixing within values.
@mixin content($value) {
  @include image-property(content, $value);
}
// IMPORTING compass/css3/background-size
// Background Size

// The the user threshold for background-clip support. Defaults to `$critical-usage-threshold`
$background-size-threshold: $critical-usage-threshold !default;

//  override to change the default
$default-background-size: 100% auto !default;


// Set the size of background images using px, width and height, or percentages.
// Currently supported in: Opera, Gecko, Webkit.
//
// * percentages are relative to the background-origin (default = padding-box)
// * mixin defaults to: `$default-background-size`
@mixin background-size($size...) {
  $size: set-arglist-default($size, $default-background-size);
  @include prefixed-properties(background-img-opts, $background-size-threshold, (background-size: $size));
}

// Set the color of your columns
$grid-background-column-color     : rgba(100, 100, 225, 0.25)   !default;
// Set the color of your gutters
$grid-background-gutter-color     : rgba(0, 0, 0, 0)            !default;

// Set the total number of columns in your grid
$grid-background-total-columns    : 24                          !default;
// Set the width of your columns
$grid-background-column-width     : 30px                        !default;
// Set the width of your gutters
$grid-background-gutter-width     : 10px                        !default;
// Set the offset, if your columns are padded in from the container edge
$grid-background-offset           : 0px                         !default;

// Set the color of your baseline
$grid-background-baseline-color   : rgba(0, 0, 0, 0.5)          !default;
// Set the height of your baseline grid
$grid-background-baseline-height  : 1.5em                       !default;

// toggle your columns grids on and off
$show-column-grid-backgrounds     : true                        !default;
// toggle your vertical grids on and off
$show-baseline-grid-backgrounds   : true                        !default;
// toggle all your grids on and off
$show-grid-backgrounds            : true                        !default;

// optionally force your grid-image to remain fluid
// no matter what units you used to declared your grid.
$grid-background-force-fluid      : false                       !default;


// Create the gradient needed for baseline grids
@function get-baseline-gradient(
  $color : $grid-background-baseline-color
) {
  $gradient: linear-gradient(to top, $color 5%, rgba($color,0) 5%);
  @return $gradient;
}

// Create the color-stops needed for horizontal grids
@function build-grid-background(
  $total          : $grid-background-total-columns,
  $column         : $grid-background-column-width,
  $gutter         : $grid-background-gutter-width,
  $offset         : $grid-background-offset,
  $column-color   : $grid-background-column-color,
  $gutter-color   : $grid-background-gutter-color
) {
  $grid: compact();
  $grid: append($grid, $gutter-color $offset, comma);
  @for $i from 0 to $total {

    // $a represents the start of this column, initially equal to the offset
    $a: $offset;
    @if $i > 0 { $a: $a + (($column + $gutter) * $i); }

    // $g represents the start of this gutter, equal to $a plus one column-width
    $g: $a + $column;

    // $z represents the end of a gutter, equal to $g plus one gutter-width
    $z: $g + $gutter;

    @if (unit($a) == "%") and ($i == ($total - 1)) {
      $z: 100%;
    }

    // and we add this column/gutter pair to our grid
    $grid: join($grid, (lighten($column-color, 5%) $a, darken($column-color, 5%) $g, $gutter-color $g, $gutter-color $z));
  }

  @return $grid;
}

// Return the gradient needed for horizontal grids
@function get-column-gradient(
  $total          : $grid-background-total-columns,
  $column         : $grid-background-column-width,
  $gutter         : $grid-background-gutter-width,
  $offset         : $grid-background-offset,
  $column-color   : $grid-background-column-color,
  $gutter-color   : $grid-background-gutter-color,
  $force-fluid    : $grid-background-force-fluid
) {
  $grid: unquote("");

  // don't force fluid grids when they are already fluid.
  @if unit($column) == "%" { $force-fluid: false; }

  @if $force-fluid {
    $grid: get-column-fluid-grid($total,$column,$gutter,$offset,$column-color,$gutter-color);
  } @else {
    $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);
  }

  // return the horizontal grid as a gradient
  $gradient: linear-gradient(left, $grid);
  @return $gradient;
}

// Convert a grid from fixed units into percentages.
@function get-column-fluid-grid(
  $total          : $grid-background-total-columns,
  $column         : $grid-background-column-width,
  $gutter         : $grid-background-gutter-width,
  $offset         : $grid-background-offset,
  $column-color   : $grid-background-column-color,
  $gutter-color   : $grid-background-gutter-color
) {
  $context: ($column * $total) + ($gutter * ($total - 1) + ($offset * 2));
  $offset: $offset / $context * 100%;
  $column: $column / $context * 100%;
  $gutter: $gutter / $context * 100%;

  // return the horizontal grid as a set of color-stops
  $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);
  @return $grid;
}


// Add just the baseline grid to an element's background
@mixin baseline-grid-background(
  $baseline : $grid-background-baseline-height,
  $color    : $grid-background-baseline-color
) {
  @if $show-grid-backgrounds and $show-baseline-grid-backgrounds {
    @include background-image(get-baseline-gradient($color));
    @include background-size(100% $baseline);
    background-position: left top;
  }
}

// Add just the horizontal grid to an element's background
@mixin column-grid-background(
  $total          : $grid-background-total-columns,
  $column         : $grid-background-column-width,
  $gutter         : $grid-background-gutter-width,
  $offset         : $grid-background-offset,
  $column-color   : $grid-background-column-color,
  $gutter-color   : $grid-background-gutter-color,
  $force-fluid    : $grid-background-force-fluid
) {
  @if $show-grid-backgrounds and $show-column-grid-backgrounds {
    @include background-image(
      get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)
    );
    background-position: left top;
  }
}

// Add both horizontal and baseline grids to an element's background
@mixin grid-background(
  $total          : $grid-background-total-columns,
  $column         : $grid-background-column-width,
  $gutter         : $grid-background-gutter-width,
  $baseline       : $grid-background-baseline-height,
  $offset         : $grid-background-offset,
  $column-color   : $grid-background-column-color,
  $gutter-color   : $grid-background-gutter-color,
  $baseline-color : $grid-background-baseline-color,
  $force-fluid    : $grid-background-force-fluid
) {
  @if $show-grid-backgrounds {
    @if $show-baseline-grid-backgrounds and $show-column-grid-backgrounds {
      @include background-image(
        get-baseline-gradient($baseline-color),
        get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)
      );
      @include background-size(100% $baseline, auto);
      background-position: left top;
    } @else {
      @include baseline-grid-background($baseline, $baseline-color);
      @include column-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid);
    }
  }
}
// IMPORTING compass/typography/units
// @private Default font-size for all browsers
$browser-default-font-size: 16px;

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;

// Whether to output fallback values in px when outputting rems.
$rem-with-px-fallback: true !default;


// Convert any CSS <length> or <percentage> value to any another.
//
// @param $length
//   A css <length> or <percentage> value
//
// @param $to-unit
//   String matching a css unit keyword, e.g. 'em', '%', etc.
//
// @param $from-context
//   When converting from relative units, the absolute length (in px) to
//   which $length refers (e.g. for $lengths in em units, would normally be the
//   font-size of the current element).
//
// @param $to-context
//   For converting to relative units, the absolute length in px to which the
//   output value will refer. Defaults to the same as $from-context, since it is
//   rarely needed.
@function convert-length(
	$length,
	$to-unit,
	$from-context: $base-font-size,
	$to-context: $from-context
) {

	$from-unit: unit($length);

	// Optimize for cases where `from` and `to` units are accidentally the same.
	@if $from-unit == $to-unit { @return $length; }

	// Context values must be in px so we can determine a conversion ratio for
	// relative units.
	@if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
	@if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }

	// Convert input length to pixels
	$px-length: $length;

	@if $from-unit != 'px' {
		// Convert relative units using the from-context parameter.
		@if      $from-unit == 'em'  { $px-length: $length * $from-context / 1em }
		@else if $from-unit == 'rem' { $px-length: $length * $base-font-size / 1rem }
		@else if $from-unit == '%'   { $px-length: $length * $from-context / 100% }
		@else if $from-unit == 'ex'  { $px-length: $length * $from-context / 2ex }
		// Convert absolute units using Sass' conversion table.
		@else if $from-unit == 'in'  or
						 $from-unit == 'mm'  or
						 $from-unit == 'cm'  or
						 $from-unit == 'pt'  or
						 $from-unit == 'pc'  { $px-length: 0px + $length }
		// Certain units can't be converted.
		@else if $from-unit == 'ch'  or
						 $from-unit == 'vw'  or
						 $from-unit == 'vh'  or
						 $from-unit == 'vmin' {
			@warn "#{$from-unit} units can't be reliably converted; Returning original value.";
			@return $length;
		}
		@else {
			@warn "#{$from-unit} is an unknown length unit. Returning original value.";
			@return $length;
		}
	}

	// Convert length in pixels to the output unit
	$output-length: $px-length;
	@if $to-unit != 'px' {
		// Relative units
		@if      $to-unit == 'em'  { $output-length: $px-length * 1em / $to-context }
		@else if $to-unit == 'rem' { $output-length: $px-length * 1rem / $base-font-size }
		@else if $to-unit == '%'   { $output-length: $px-length * 100% / $to-context }
		@else if $to-unit == 'ex'  { $output-length: $px-length * 2ex / $to-context }
		// Absolute units
		@else if $to-unit == 'in'  { $output-length: 0in + $px-length }
		@else if $to-unit == 'mm'  { $output-length: 0mm + $px-length }
		@else if $to-unit == 'cm'  { $output-length: 0cm + $px-length }
		@else if $to-unit == 'pt'  { $output-length: 0pt + $px-length }
		@else if $to-unit == 'pc'  { $output-length: 0pc + $px-length }
		// Non-convertible units
		@else if $to-unit == 'ch'  or
						 $to-unit == 'vw'  or
						 $to-unit == 'vh'  or
						 $to-unit == 'vmin' {
			@warn "#{$to-unit} units can't be reliably converted; Returning original value.";
			@return $length;
		}
		@else {
			@warn "#{$to-unit} is an unknown length unit. Returning original value.";
			@return $length;
		}
	}

	@return $output-length;
}


// @private Get the px/rem versions of a value.
@function rem-fallback-values($value) {
  $_return: (
    px: $value,
    rem: $value,
  );

  @if type-of($value) == number and not unitless($value) {
    @if unit($value) == rem {
      $_return: map-merge($_return, (
        px: round(convert-length($value, px)),
      ));
    } @else if unit($value) == px {
      $_return: map-merge($_return, (
        px: round($value),
        rem: convert-length($value, rem),
      ));
    }
  }

  @return $_return;
}

// @private Get the px/rem versions of a list (or nested lists).
@function list-convert-rems($value) {
  $_empty: (
    px: (),
    rem: (),
  );
  $_return: $_empty;
  $_sep: null;

  @if type-of($value) == list {
    $_sep: list-separator($value);
    @each $sub in $value {
      $_this: list-convert-rems($sub);
      $_return: (
        px: append(map-get($_return, px), map-get($_this, px), $_sep),
        rem: append(map-get($_return, rem), map-get($_this, rem), $_sep),
      );
    }
  } @else {
    $_this: rem-fallback-values($value);
    $_return: map-merge($_return, $_this);
  }

  @return $_return;
}


// Output a given style rule containing rem values along with an (optional)
// fallback rule for older browsers (with rem values converted to px).
//
// @param $property
//   The css property name.
//
// @param $values
//   The value or list of values for the property.
//
// @param $use-px-fallback
//   [ true | false ]
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {

  // get converted values.
  $values: list-convert-rems($values);
  $px-values: map-get($values, px);
  $values: map-get($values, rem);

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback and $px-values != $values {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $values;
}

// The default font size for all text in pixels
$base-font-size: 16px !default;

// The distance between text baselines (vertical rhythm) in pixels.
$base-line-height: 24px !default;

// The length unit in which to output rhythm values.
// Supported values: px, em, rem. Percent units can't be used since they
// make calculating padding and margins impractical, and percentage borders are
// not valid or supported in css.
$rhythm-unit: 'em' !default;

// Whether to output fallback values in px when using rem as the rhythm-unit.
$rem-with-px-fallback: true !default;

// Default values for rhythm borders properties.
// Supports style alone eg. `solid` or list of style and color eg. `solid #aaa`;
$default-rhythm-border-width: 1px !default;
$default-rhythm-border-style: solid !default;

// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
// to round the line height to the nearest half line height instead of the
// nearest integral line height to avoid large spacing between lines.
$round-to-nearest-half-line: false !default;

// Ensure there is at least this many pixels
// of vertical padding above and below the text.
$min-line-padding: 2px !default;

// The leader is the amount of whitespace in a line.
// It might be useful in your calculations.
$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);

// The half-leader is the amount of whitespace above and below a line.
// It might be useful in your calculations.
$base-half-leader: $base-leader / 2;

// @private Whether the rhythm output is in absolute units (px) or not (em, rem)
$relative-font-sizing: if($rhythm-unit == px, false, true);

// Validate units
@if unit($base-font-size)   != 'px' { @warn "$base-font-size must resolve to a pixel unit."; }
@if unit($base-line-height) != 'px' { @warn "$base-line-height must resolve to a pixel unit."; }
@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {
  @warn "$rhythm-unit must be `px`, `em` or `rem`.";
}


// Calculate rhythm units.
@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
  $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}

// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
  $lines: if($round-to-nearest-half-line,
             ceil(2 * $font-size / $base-line-height) / 2,
             ceil($font-size / $base-line-height));
  // If lines are cramped include some extra lead.
  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}


// @private Outputs rhythm values. For rem units, outputs pixel fallbacks
// by default.
@mixin output-rhythm($property, $values) {
  @if $rhythm-unit == rem and $rem-with-px-fallback {
    @include rem($property, $values);
  }
  @else {
    $output: ();
    @each $value in $values {
      @if unit($value) == px {
        // Ensure all pixel values are rounded to the nearest pixel.
        $output: join($output, round($value));
      }
      @else {
        $output: join($output, $value);
      }
    }
    #{$property}: $output;
  }
}

// Establishes a font baseline for the given font-size.
@mixin establish-baseline($font-size: $base-font-size) {
  $relative-size: 100% * ($font-size / $browser-default-font-size);

  @if support-legacy-browser(ie, "6") and (not $relative-font-sizing) {
    // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts
    // whose root is set in ems. So we set the root font size in percentages of
    // the default font size, even if we are using absolute sizes elsewhere.
    * html { font-size: $relative-size; }
  }
  html {
    font-size: if($relative-font-sizing, $relative-size, $font-size);

    // Webkit has a bug that prevents line-height being set in rem on <html>;
    // To work around this and simplify output, we can set initial line-height
    // in ems for all relative rhythm units, even when $rhythm-unit is `rem`.
    @if $relative-font-sizing {
      line-height: convert-length($base-line-height, em);
    }
    @else {
      line-height: round($base-line-height);
    }
  }
}

// Resets the baseline to 1 rhythm unit
// Does not work on elements whose font-size is different from $base-font-size.
//
// @deprecated This mixin will be removed in the next release.
// Please use `adjust-leading-to(1)` instead.
@mixin reset-baseline($font-size: $base-font-size) {
  @include adjust-leading-to(1, $font-size);
}

// Show a background image that can be used to debug your alignments.
// As this is a development feature, this mixin never outputs pixel fallbacks
// for rem output.
// Include the $img argument if you would rather use your own image than the
// Compass default gradient image.
@mixin debug-vertical-alignment($img: false) {
  @if $img {
    background: image-url($img);
  }
  @else {
    @include baseline-grid-background(if($round-to-nearest-half-line, rhythm(1/2), rhythm(1)));
  }
}

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
  $to-size: convert-length($to-size, px, $from-size);
  @if $lines == auto {
    $lines: lines-for-font-size($to-size);
  }
  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
  @include adjust-leading-to($lines, $to-size);
}

// Adjust a block to have different line height to maintain the rhythm.
// $lines specifies how many multiples of the baseline rhythm each line of this
// font should use up. It does not have to be an integer, but it defaults to the
// smallest integer that is large enough to fit the font.
@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
  @include output-rhythm(line-height, rhythm($lines, $font-size));
}

// Apply leading whitespace. The $property can be margin or padding.
@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as padding.
@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as margin.
@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

// Apply trailing whitespace. The $property can be margin or padding.
@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as padding.
@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as margin.
@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

// Shorthand mixin to apply whitespace for top and bottom margins and padding.
@mixin rhythm(
  $leader: 1,
  $padding-leader: 0,
  $padding-trailer: $padding-leader,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom margins.
@mixin rhythm-margins(
  $leader: 1,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom padding.
@mixin rhythm-padding(
  $padding-leader: 1,
  $padding-trailer: $padding-leader,
  $font-size: $base-font-size
) {
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
}

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border.
@mixin apply-side-rhythm-border(
  $side,
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  // If applying borders to all sides, use shorthand properties
  $border-prop: if($side == all, border, border-#{$side});
  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
  #{$border-prop}-style: nth($border-style, 1);
  @if type-of($border-style) == list and length($border-style) > 1 {
    #{$border-prop}-color: nth($border-style, 2);
  }
  $padding-prop: if($side == all, padding, padding-#{$side});
  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}

// Apply a leading border.
// $border-style and $width are deprecated and will be removed in a future version of Compass.
@mixin leading-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

// Apply a trailing border.
@mixin trailing-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

// Apply both leading and trailing borders.
@mixin horizontal-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}

// Alias for `horizontal-borders` mixin.
@mixin h-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include horizontal-borders($width, $lines, $font-size, $border-style);
}

// Apply borders and whitespace equally to all sides.
@mixin rhythm-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}
// IMPORTING compass/css3
// IMPORTING css3/border-radius
// Border Radius



// The the user threshold for border-radius support. Defaults to `$graceful-usage-threshold`
$border-radius-threshold: $graceful-usage-threshold !default;

// The length of a border-radius to be used by default.
$default-border-radius: 5px !default;


// Round all corners by a specific amount, defaults to value of `$default-border-radius`.
//
// When two values are passed, the first is the horizontal radius
// and the second is the vertical radius.
//
// Note: webkit does not support shorthand syntax for several corners at once.
// So in the case where you pass several values only the first will be passed to webkit.
//
// Examples:
//
//     .simple   { @include border-radius(4px, 4px); }
//     .compound { @include border-radius(2px 5px, 3px 6px); }
//     .crazy    { @include border-radius(1px 3px 5px 7px, 2px 4px 6px 8px)}
//
// Which generates:
//
//     .simple {
//       -moz-border-radius: 4px / 4px;
//       -webkit-border-radius: 4px 4px;
//       border-radius: 4px / 4px; }
//     
//     .compound {
//       -moz-border-radius: 2px 5px / 3px 6px;
//       -webkit-border-radius: 2px 3px;
//       border-radius: 2px 5px / 3px 6px; }
//     
//     .crazy {
//       -moz-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;
//       -webkit-border-radius: 1px 2px;
//       border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px; }
@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
  @include with-each-prefix(border-radius, $border-radius-threshold) {
    @if $current-prefix == -webkit {
      // Legacy Webkit didn't understand the official shorthand syntax for specifying a vertical radius.
      $legacy-webkit-radius: first-value-of($radius);
      @if $vertical-radius { $legacy-webkit-radius: append($legacy-webkit-radius, first-value-of($vertical-radius)); }
      @include prefix-prop(border-radius, $legacy-webkit-radius);
    } @else {
      // Official syntax for everyone else
      @include prefix-prop(border-radius, if($vertical-radius, #{$radius} / #{$vertical-radius}, $radius));
    }
  }
}

// Round radius at position by amount.
//
// * legal values for `$vert`: `top`, `bottom`
// * legal values for `$horz`: `left`, `right`
@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {
  @include with-each-prefix(border-radius, $border-radius-threshold) {
    @if $current-prefix == -moz {
      // Support for mozilla's syntax for specifying a corner
      @include prefix-prop("border-radius-#{$vert}#{$horz}", $radius);
    } @else {
      // Official syntax for everyone else
      @include prefix-prop("border-#{$vert}-#{$horz}-radius", $radius);
    }
  }
}

// Round top-left corner only
@mixin border-top-left-radius($radius: $default-border-radius) {
  @include border-corner-radius(top, left, $radius); }

// Round top-right corner only
@mixin border-top-right-radius($radius: $default-border-radius) {
  @include border-corner-radius(top, right, $radius); }

// Round bottom-left corner only
@mixin border-bottom-left-radius($radius: $default-border-radius) {
  @include border-corner-radius(bottom, left, $radius); }

// Round bottom-right corner only
@mixin border-bottom-right-radius($radius: $default-border-radius) {
  @include border-corner-radius(bottom, right, $radius); }

// Round both top corners by amount
@mixin border-top-radius($radius: $default-border-radius) {
  @include border-top-left-radius($radius);
  @include border-top-right-radius($radius); }

// Round both right corners by amount
@mixin border-right-radius($radius: $default-border-radius) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius); }

// Round both bottom corners by amount
@mixin border-bottom-radius($radius: $default-border-radius) {
  @include border-bottom-left-radius($radius);
  @include border-bottom-right-radius($radius); }

// Round both left corners by amount
@mixin border-left-radius($radius: $default-border-radius) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius); }
// IMPORTING css3/inline-block

// The legacy support for inline-block.
// Defaults to the $graceful-usage-threshold.
$inline-block-support-threshold: $graceful-usage-threshold !default;

// Set `$inline-block-alignment` to `none` or `false` to disable the output
// of a vertical-align property in the inline-block mixin.
// Or set it to a legal value for `vertical-align` to change the default.
$inline-block-alignment: middle !default;

// Provides a cross-browser method to implement `display: inline-block;`
@mixin inline-block($alignment: $inline-block-alignment, $ie-alignment: auto) {
  // legacy support for VERY old firefox
  @if support-legacy-browser("firefox", "2", $threshold: $inline-block-support-threshold) {
    display: -moz-inline-stack;
  }
  // standard
  display: inline-block;
  @if $alignment and $alignment != none {
    vertical-align: $alignment;
  }
  // legacy IE support
  @if support-legacy-browser("ie", "7", $threshold: $inline-block-support-threshold) {
    @if $ie-alignment and $ie-alignment != none {
      *vertical-align: $ie-alignment;
    }
    *zoom: 1;
    *display: inline;
  }
}
// IMPORTING css3/opacity

// The support usage threshold for opacity. Defaults to the global
// threshold for graceful degradation.
$opacity-usage-threshold: $graceful-usage-threshold !default;

// Provides cross-browser CSS opacity. Takes a number between 0 and 1 as the argument, e.g. 0.5 for 50% opacity.
//
//     @param $opacity
//         A number between 0 and 1, where 0 is transparent and 1 is opaque.

@mixin opacity($opacity) {
  @include for-legacy-browser("ie", "8", $threshold: $opacity-usage-threshold) {
    @if $opacity == 1 {
      filter: unquote("progid:DXImageTransform.Microsoft.Alpha(enabled=false)");
    } @else {
      filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }
  }
  opacity: $opacity;
}

// Make an element completely transparent.
@mixin transparent { @include opacity(0); }

// Make an element completely opaque.
@mixin opaque { @include opacity(1); }
// IMPORTING css3/box-shadow
// Box Shadow


// The prefixed support threshold for box-shadow.
// Defaults to the $graceful-usage-threshold.
$box-shadow-support-threshold: $graceful-usage-threshold !default;


// The default color for box shadows
$default-box-shadow-color: #333333 !default;

// The default horizontal offset. Positive is to the right.
$default-box-shadow-h-offset: 0px !default;

// The default vertical offset. Positive is down.
$default-box-shadow-v-offset: 0px !default;

// The default blur length.
$default-box-shadow-blur: 5px !default;

// The default spread length.
$default-box-shadow-spread: null !default;

// The default shadow inset: inset or null (for standard shadow).
$default-box-shadow-inset: null !default;

@function default-box-shadow() {
  @return compact(if($default-box-shadow-inset, inset, null)
                  $default-box-shadow-h-offset
                  $default-box-shadow-v-offset
                  $default-box-shadow-blur
                  $default-box-shadow-spread
                  $default-box-shadow-color);
}

// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows
// when one or more box shadows are needed.
// Each shadow argument should adhere to the standard css3 syntax
// for the box-shadow property.
@mixin box-shadow($shadow...) {
  $shadow: set-arglist-default($shadow, default-box-shadow());
  @include prefixed-properties(css-boxshadow, $box-shadow-support-threshold, (box-shadow: $shadow));
}

// Provides a single cross-browser CSS box shadow for Webkit, Gecko, and CSS3.
// Includes default arguments for color, horizontal offset, vertical offset, blur length, spread length, and inset.
@mixin single-box-shadow(
  $hoff   : null,
  $voff   : null,
  $blur   : null,
  $spread : null,
  $color  : null,
  $inset  : $default-box-shadow-inset
) {
  // Handle legacy argument order
  @if not ($hoff == none or $hoff == null) and type-of($hoff) != number {
    @warn "The $color argument for single-box-shadow is now the 5th argument instead of the 1st.";
    $tmp-color: $color;
    $color: $hoff;
    $hoff: $voff;
    $voff: $blur;
    $blur: $spread;
    $spread: $tmp-color
  }

  // Need to set these defaults here instead of the arglist to support the above backwards compat handling
  @if $hoff   == null { $hoff:   $default-box-shadow-h-offset; }
  @if $voff   == null { $hoff:   $default-box-shadow-v-offset; }
  @if $blur   == null { $blur:   $default-box-shadow-blur;     }
  @if $spread == null { $spread: $default-box-shadow-spread;   }
  @if $color  == null { $color:  $default-box-shadow-color;    }

  @if not ($inset == true or $inset == false or $inset == null or $inset == inset) {
    @warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
  }

  @if $hoff == none {
    @include box-shadow(none);
  } @else {
    $full   : $hoff $voff;
    @if $blur   { $full: $full $blur;   }
    @if $spread { $full: $full $spread; }
    @if $color  { $full: $full $color;  }
    @if $inset  { $full: inset $full;   }
    @include box-shadow($full);
  }
}
// IMPORTING css3/text-shadow
// Text Shadow



// These defaults make the arguments optional for this mixin
// If you like, set different defaults in your project

$default-text-shadow-color      : #aaa    !default;
$default-text-shadow-h-offset   : 0px     !default;
$default-text-shadow-v-offset   : 0px     !default;
$default-text-shadow-blur       : 1px     !default;
$default-text-shadow-spread     : false   !default;


// Provides cross-browser text shadows when one or more shadows are needed.
// Each shadow argument should adhere to the standard css3 syntax for the
// text-shadow property.
//
// Note: if any shadow has a spread parameter, this will cause the mixin
// to emit the shadow declaration twice, first without the spread,
// then with the spread included. This allows you to progressively
// enhance the browsers that do support the spread parameter.
@mixin text-shadow(
  $shadow...
) {
  $shadow: if(length($shadow) > 0, $shadow, default);
  $default: -compass-space-list(compact($default-text-shadow-h-offset $default-text-shadow-v-offset $default-text-shadow-blur $default-text-shadow-spread $default-text-shadow-color));
  $shadows-without-spread: join((),(),comma);
  $shadows: join((),(),comma);
  $has-spread: false;

  @each $layer in $shadow {
    $layer: if($layer == 'default', $default, $layer);
    @if length($layer) > 4 {
      $has-spread: true;
      $shadows-without-spread: append($shadows-without-spread, nth($layer,1) nth($layer,2) nth($layer,3) nth($layer,5));
      $shadows: append($shadows, $layer);
    } @else {
      $shadows-without-spread: append($shadows-without-spread, $layer);
      $shadows: append($shadows, $layer);
    }
  }
  @if $has-spread {
    text-shadow: $shadows-without-spread;
  }
  text-shadow: $shadows;
}

// Provides a single cross-browser CSS text shadow.
//
// Provides sensible defaults for the color, horizontal offset, vertical offset, blur, and spread
// according to the configuration defaults above.
@mixin single-text-shadow(
  $hoff: false,
  $voff: false,
  $blur: false,
  $spread: false,
  $color: false
) {
  // A lot of people think the color comes first. It doesn't.
  @if type-of($hoff) == color {
    $temp-color: $hoff;
    $hoff: $voff;
    $voff: $blur;
    $blur: $spread;
    $spread: $color;
    $color: $temp-color;
  }
  // Can't rely on default assignment with multiple supported argument orders.
  $hoff:   if($hoff,   $hoff,   $default-text-shadow-h-offset);
  $voff:   if($voff,   $voff,   $default-text-shadow-v-offset);
  $blur:   if($blur,   $blur,   $default-text-shadow-blur    );
  $spread: if($spread, $spread, $default-text-shadow-spread  );
  $color:  if($color,  $color,  $default-text-shadow-color   );
  // We don't need experimental support for this property.
  @if $color == none or $hoff == none {
    @include text-shadow(none);
  } @else {
    @include text-shadow(compact($hoff $voff $blur $spread $color));
  }
}
// IMPORTING css3/columns
// Columns

// The prefixed support threshold for columns.
// Defaults to the $critical-usage-threshold.
$multicolumn-support-threshold: $critical-usage-threshold !default;


// Specify the shorthand `columns` property.
//
// Example:
//
//     @include columns(20em 2);
@mixin columns($width-and-count) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    columns: $width-and-count
  ));
}

// Specify the number of columns
@mixin column-count($count) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-count: $count
  ));
}

// Specify the gap between columns e.g. `20px`
@mixin column-gap($width) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-gap: $width
  ));
}

// Specify the width of columns e.g. `100px`
@mixin column-width($width) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-width: $width
  ));
}

// Specify how many columns an element should span across.
//
// * legal values are 1, all
@mixin column-span($columns) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-span: $columns
  ));
}

// Specify the width of the rule between columns e.g. `1px`
@mixin column-rule-width($width) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    rule-width: $width
  ));
}

// Specify the style of the rule between columns e.g. `dotted`.
// This works like border-style.
@mixin column-rule-style($style) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    rule-style: $style
  ));
}

// Specify the color of the rule between columns e.g. `blue`.
// This works like border-color.
@mixin column-rule-color($color) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    rule-color: $color
  ));
}

// Mixin encompassing all column rule properties
// For example:
//
//     @include column-rule(1px, solid, #c00)
//
// Or the values can be space separated:
//
//     @include column-rule(1px solid #c00)
@mixin column-rule($width, $style: null, $color: null) {
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-rule: $width $style $color
  ));
}

// All-purpose mixin for setting column breaks.
//
// * legal values for $type : before, after, inside
// * legal values for '$value' are dependent on $type
//    * when $type = before, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column
//    * when $type = after, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column
//    * when $type = inside, legal values are auto, avoid, avoid-page, avoid-column
//
//  Examples:
//    h2.before {@include column-break(before, always);}
//    h2.after {@include column-break(after, always); }
//    h2.inside {@include column-break(inside); }
//
//  Which generates:
//  h2.before {
//    -webkit-column-break-before: always;
//    break-before: always;}
//
//  h2.after {
//    -webkit-column-break-after: always;
//    break-after: always; }
//
//  h2.inside {
//    -webkit-column-break-inside: auto;
//    break-inside: auto;}

@mixin column-break($type: before, $value: auto){
  @include with-each-prefix(multicolumn, $multicolumn-support-threshold) {
    @if $current-prefix == -webkit {
      // Webkit uses non-standard syntax
      -webkit-column-break-#{$type}: $value;
    } @else if $current-prefix == -moz {
      // Moz uses a different non-standard syntax
      -moz-page-break-#{$type}: $value;
    } @else {
      @include prefix-prop(break-#{$type}, $value);
    }
  }
}

// Mixin for setting break-before
//
// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column
//
//  Example:
//    h2.before {@include break-before(always);}
//
//  Which generates:
//
//  h2.before {
//    -webkit-column-break-before: always;
//    break-before: always;}
@mixin break-before($value: auto){
  @include column-break(before, $value);
}

@mixin column-break-before($value: auto){
  @include column-break(before, $value);
  @warn '"column-break-before" has been deprecated in favor of the official syntax: "break-before".';
}

// Mixin for setting break-after
//
// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column
//
//  Example:
//    h2.after {@include break-after(always); }
//
//  Which generates:
//
//  h2.after {
//    -webkit-column-break-after: always;
//    break-after: always; }
@mixin break-after($value: auto){
  @include column-break(after, $value);
}

@mixin column-break-after($value: auto){
  @include column-break(after, $value);
  @warn '"column-break-after" has been deprecated in favor of the official syntax: "break-after".';
}

// Mixin for setting break-inside
//
// * legal values are auto, avoid, avoid-page, avoid-column
//
//  Example:
//    h2.inside {@include break-inside();}
//
//  Which generates:
//
//  h2.inside {
//    -webkit-column-break-inside: auto;
//    break-inside: auto;}
@mixin break-inside($value: auto){
  @include column-break(inside, $value);
}

@mixin column-break-inside($value: auto){
  @include column-break(inside, $value);
  @warn '"column-break-inside" has been deprecated in favor of the official syntax: "break-inside".';
}

// Mixin for setting column-span
//
// * legal values: none, all
//
//  Example:
//    h2.span {@include column-span();}
@mixin column-span($span: all){
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-span: $span
  ));
}

// Mixin for setting column-fill
//
// * legal values: auto, balance
//
//  Example:
//    h2.fill {@include column-fill();}
@mixin column-fill($fill: balance){
  @include prefixed-properties(multicolumn, $multicolumn-support-threshold,(
    column-fill: $fill
  ));
}
// IMPORTING css3/box-sizing
// Box Sizing


// The prefixed support threshold for box-sizing.
// Defaults to the $graceful-usage-threshold.
$box-sizing-support-threshold: $critical-usage-threshold !default;

// The default box-sizing model when no argument is provided to the box-sizing mixin: [ content-box | border-box | padding-box ]
//
// The browser default is content-box, compass defaults to border-box.
$default-box-sizing: border-box !default;


// Change the box model for Mozilla, Webkit, IE8 and the future
//
//     $box-model: [ content-box | border-box | padding-box ]
@mixin box-sizing($box-model: $default-box-sizing) {
  $box-model: unquote($box-model);
  @include prefixed-properties(css3-boxsizing, $box-sizing-support-threshold, (box-sizing: $box-model));
}
// IMPORTING css3/flexbox
// There are two ways to use the flexbox module.
// If you're using the final version of the spec,
// you can use the property mixins as elsewhere in
// the css3 module.
//
// You can also use the flexbox prefixing mixin `flexbox`.
// This mixin takes an optional `$version` argument which
// allows you to specify which spec version the properties
// are using so that they will be prefixed correctly.
//
// Example:
//
//     .flex-column {
//       /* For flexbox spec v1 */
//       @include flexbox((
//         display: box,
//         box-orient: vertical,
//       ), $version: 1);
//       
//       /* For flexbox spec v2 */
//       @include flexbox((
//         display: flexbox,
//         flex-direction: column,
//       ), $version: 2);
//       
//       /* Latest Spec */
//       @include flexbox((
//         display: flex,
//         flex-direction: column,
//       ));
//     }
//
// Which compiles to:
//
//     .flex-row {
//       /* For flexbox spec v1 */
//       display: -moz-box;
//       -moz-box-orient: vertical;
//       display: -webkit-box;
//       -webkit-box-orient: vertical;
//       
//       /* For flexbox spec v2 */
//       display: -ms-flexbox;
//       -ms-flex-direction: column;
//       
//       /* Latest Spec */
//       display: -webkit-flex;
//       -webkit-flex-direction: column;
//       display: flex;
//       flex-direction: column;
//     }


$flexbox-support-threshold: $critical-usage-threshold !default;


// @private
$flexbox-capability-options: (
  (full-support: true),
  (partial-support: true, spec-versions: 3)
);

// This is the underlying implementation for all the other mixins in this module.
// It is the only way to access prefix support for older versions of the spec.
//
// `$properties`: map of property-value pairs that should be prefixed

// `$version1: the version of the spec to use when considering what prefix
// to appply. Defaults to the most recent (spec version 3). Only the most
// recent version of the spec outputs an unprefixed version.
@mixin flexbox($properties, $version: null) {
  $capability-options: $flexbox-capability-options;
  @if $version {
    $capability-options: (partial-support: true, spec-versions: $version);
  }

  @include with-each-prefix(flexbox, $flexbox-support-threshold, $capability-options) {
    // Don't output unprefixed versions when the spec version is not the final version
    @if $version and $current-prefix or not $version or $version == 3 {
      @each $prop, $value in $properties {
        @if $prop == display {
          display: prefix-identifier($value);
        } @else {
          @include prefix-prop($prop, $value);
        }
      }
    }
  }
}

// Values for $display are: flex (default), inline-flex
@mixin display-flex($display: flex) {
  @include flexbox((display: $display));
}

// Values: row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  @include flexbox((flex-direction: $direction));
}

// Values: nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  @include flexbox((flex-wrap: $wrap));
}

// Shorthand for flex-direction and flex-wrap.
@mixin flex-flow($flow) {
  @include flexbox((flex-flow: $flow));
}

// Accepts an integer
@mixin order($order) {
  @include flexbox((order: $order));
}

// Shorthand for flex-grow, flex-shrink and optionally flex-basis.
// Space separated, in that order.
@mixin flex($flex) {
  @include flexbox((flex: $flex));
}

// Accepts a number.
@mixin flex-grow($flex-grow) {
  @include flexbox((flex-grow: $flex-grow));
}

// Accepts a number.
@mixin flex-shrink($flex-shrink) {
  @include flexbox((flex-shrink: $flex-shrink));
}

// Accepts any legal value for the width property.
@mixin flex-basis($flex-basis) {
  @include flexbox((flex-basis: $flex-basis));
}

// Legal values: flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify-content) {
  @include flexbox((justify-content: $justify-content));
}

// Legal values: flex-start | flex-end | center | baseline | stretch
@mixin align-items($align-items) {
  @include flexbox((align-items: $align-items));
}

// Legal values: auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align-self) {
  @include flexbox((align-self: $align-self));
}

// Legal values: flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align-content) {
  @include flexbox((align-content: $align-content));
}
// IMPORTING css3/images

$gradient-support-threshold: $graceful-usage-threshold !default;
$svg-gradient-shim-threshold: $graceful-usage-threshold !default;
$border-image-support-threshold: $graceful-usage-threshold !default;
$owg-threshold: $graceful-usage-threshold !default;

// Compass assumes you will use the official gradient syntax,
// unless otherwise instructed.
$use-legacy-gradient-syntax: false !default;

// Create a linear gradient using standard official or legacy syntax.
// This function must be included in one of the following
// image module mixins to work properly.
@function linear-gradient($angle, $details...) {
  $legacy-syntax: $use-legacy-gradient-syntax;

  @if type-of($angle) != 'number' {
    $angle: compact($angle);
    $legacy-syntax: if(index($angle, 'to'), false, true);
  }

  @if $legacy-syntax {
    @return _linear-gradient_legacy($angle, $details...);
  } @else {
    @return _linear-gradient($angle, $details...);
  }
}

// These browsers support svg but not gradients
// so we can shim the gradient with an inline svg file.
$browsers-supporting-svg-but-not-gradients: (ie: "9", opera: "9.5-9.6");

// These browsers require the old webkit gradient syntax
$browsers-supporting-old-webkit-gradients: (android: ("2.1", "3"));

@mixin each-gradient-prefix($values) {
  @if prefixed(-svg, $values) {
    @include for-legacy-browsers($browsers-supporting-svg-but-not-gradients,
                                 $svg-gradient-shim-threshold)
    {
      @include with-prefix(-svg) {
        @content;
      }
    }
  }
  @if prefixed(-owg, $values) {
    @include for-legacy-browsers($browsers-supporting-old-webkit-gradients,
                                 $owg-threshold)
    {
      @include with-prefix(-owg) {
        @content;
      }
    }
  }
  @include with-each-prefix(css-gradients, $gradient-support-threshold) {
    @if $current-prefix {
      @if prefixed($current-prefix, $values) {
        @content;
      } @else if $debug-browser-support {
        /* There is not a value that needs to be prefixed with #{$current-prefix} in: #{$values} */
      }
    } @else {
      @content;
    }
  }
}

@mixin image-property($property, $values...) {
  @include each-gradient-prefix($values) {
    @if $current-prefix {
      #{$property}: prefix($current-prefix, $values);
    } @else {
      #{$property}: $values;
    }
    @content;
  }
}

// Background property support for vendor prefixing within values.
@mixin background($backgrounds...) {
  @include image-property(background, $backgrounds...);
}

// Set any number of background layers, along with a fallback.
// The final argument will be output separately, first, as a css2 fallback.
@mixin background-with-css2-fallback($backgrounds...) {
  @if length($backgrounds) > 1 or prefixed(-css2, $backgrounds) {
    background: -css2(nth($backgrounds, -1));
  }
  @include background($backgrounds...);
}


// Background image property support for vendor prefixing within values.
@mixin background-image($images...) {
  @include image-property(background-image, $images...) {
    @if $current-prefix == -svg {
      background-size: 100%;
    }
  }
}

// Emit a IE-Specific filters that renders a simple linear gradient.
// For use in IE 6 - 8. Best practice would have you apply this via a
// conditional IE stylesheet, but if you must, you should place this before
// any background-image properties that you have specified.
//
// For the `$orientation` parameter, you can pass `vertical` or `horizontal`.
@mixin filter-gradient(
  $start-color,
  $end-color,
  $orientation: vertical
) {
  @include for-legacy-browsers((ie: "8"), $gradient-support-threshold) {
    @include has-layout;
    $gradient-type: if($orientation == vertical, 0, 1);
    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');
  }
}


// Border image property support for vendor prefixing properties and values.
@mixin border-image($value) {
  @include with-each-prefix(border-image, $border-image-support-threshold) {
    $border-prefix: $current-prefix;
    @include each-gradient-prefix($value) {
      @if $current-prefix and prefixed($current-prefix, $value) {
        $legacy-value: reject($value, fill);
        @include prefix-prop(border-image, prefix($current-prefix, $legacy-value), $prefix: $border-prefix);
      } @else {
        @include prefix-prop(border-image, $value, $prefix: $border-prefix);
      }
    }
  }
}

// List style image property support for vendor prefixing within values.
@mixin list-style-image($image) {
  @include image-property(list-style-image, $image);
}

// List style property support for vendor prefixing within values.
@mixin list-style($value) {
  @include image-property(list-style, $value);
}

// content property support for vendor prefixing within values.
@mixin content($value) {
  @include image-property(content, $value);
}
// IMPORTING css3/background-clip
// Background Clip

// The the user threshold for background-clip support. Defaults to `$critical-usage-threshold`
$background-clip-support-threshold: $critical-usage-threshold !default;

// The default border-box model: [border-box | padding-box | content-box]
$default-background-clip: padding-box !default;


// Clip the background (image and color) at the edge of the padding, border, or content.
//   $clip... : [padding-box | border-box | content-box]
@mixin background-clip($clip...) {
  $output: ();
  $deprecated: ();

  @if (length($clip) > 0) {
    @each $layer in $clip {
      $output: append($output, unquote($layer), comma);
      $deprecated: append($deprecated, legacy-box($layer), comma);
    }
  } @else {
    $output: $default-background-clip;
    $deprecated: legacy-box($default-background-clip);
  }

  @include with-each-prefix(background-img-opts, $background-clip-support-threshold) {
    @if $current-prefix == -moz or $current-prefix == -webkit {
      // Legacy versions of Mozilla support a different syntax, prefixed.
      @include prefix-prop(background-clip, $deprecated);
    } @else {
      @include prefix-prop(background-clip, $output);
    }
  }
}
// IMPORTING css3/background-origin
// Background Origin

// The the user threshold for background-origin support. Defaults to `$critical-usage-threshold`
$background-origin-threshold: $critical-usage-threshold !default;


// The default background-origin: [border-box | padding-box | content-box]
$default-background-origin: content-box !default;


// Set the origin of the background (image and color) at the edge of the padding, border, or content.
//
//     $origin... : [padding-box | border-box | content-box]
@mixin background-origin($origin...) {
  $output: ();
  $deprecated: ();

  @if (length($origin) > 0) {
    @each $layer in $origin {
      $output: append($output, unquote($layer), comma);
      $deprecated: append($deprecated, legacy-box($layer), comma);
    }
  } @else {
    $output: $default-background-origin;
    $deprecated: legacy-box($default-background-origin);
  }

  @include with-each-prefix(background-img-opts, $background-origin-threshold) {
    @if $current-prefix == -moz or $current-prefix == -webkit {
      // Legacy versions of Mozilla support a different syntax, prefixed.
      @include prefix-prop(background-origin, $deprecated)
    } @else {
      @include prefix-prop(background-origin, $output)
    }
  }
}
// IMPORTING css3/background-size
// Background Size

// The the user threshold for background-clip support. Defaults to `$critical-usage-threshold`
$background-size-threshold: $critical-usage-threshold !default;

//  override to change the default
$default-background-size: 100% auto !default;


// Set the size of background images using px, width and height, or percentages.
// Currently supported in: Opera, Gecko, Webkit.
//
// * percentages are relative to the background-origin (default = padding-box)
// * mixin defaults to: `$default-background-size`
@mixin background-size($size...) {
  $size: set-arglist-default($size, $default-background-size);
  @include prefixed-properties(background-img-opts, $background-size-threshold, (background-size: $size));
}
// IMPORTING css3/font-face

// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.
//
// * $name is required, arbitrary, and what you will use in font stacks.
// * $font-files is required using font-files('relative/location', 'format').
//   for best results use this order: woff, opentype/truetype, svg
// * $eot is required by IE, and is a relative location of the eot file.
// * $weight shows if the font is bold, defaults to normal
// * $style defaults to normal, might be also italic
// * For android 2.2 Compatiblity, please ensure that your web page has
//   a meta viewport tag.
// * To support iOS < 4.2, an SVG file must be provided
//
// If you need to generate other formats check out the Font Squirrel
// [font generator](http://www.fontsquirrel.com/fontface/generator)
//

// In order to refer to a specific style of the font in your stylesheets as
// e.g. "font-style: italic;",  you may add a couple of @font-face includes
// containing the respective font files for each style and specying
// respective the $style parameter.

// Order of the includes matters, and it is: normal, bold, italic, bold+italic.

@mixin font-face(
  $name,
  $font-files,
  $eot: false,
  $weight: false,
  $style: false
) {
  $iefont: unquote("#{$eot}?#iefix");
  @font-face {
    font-family: quote($name);
    @if $eot {
      src: font-url($eot);
      $font-files: font-url($iefont) unquote("format('embedded-opentype')"), $font-files;
    }
    src: $font-files;
    @if $weight {
      font-weight: $weight;
    }
    @if $style {
      font-style: $style;
    }
  }
}
// IMPORTING css3/transform

// The the user threshold for transform support. Defaults to `$graceful-usage-threshold`
$transform-support-threshold: $graceful-usage-threshold !default;

// @doc off
// Note ----------------------------------------------------------------------
// Safari, Chrome, and Firefox all support 3D transforms. However,
// only in the most recent builds. You should also provide fallback 2d support for
// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Firefox.

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $capability: if($only3d or length($origin) > 2, transforms3d, transforms2d);
  @include prefixed-properties($capability, $transform-support-threshold, (
    transform-origin: $origin
  ));
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied.
@mixin transform(
  $transform,
  $only3d: false
) {
  $capability: if($only3d, transforms3d, transforms2d);
  @include prefixed-properties($capability, $transform-support-threshold, (
    transform: $transform
  ));
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a unitless number representing the depth of the
// z-axis. The higher the perspective, the more exaggerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include prefixed-properties(transforms3d, $transform-support-threshold, (
    perspective: $p
  ));
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include prefixed-properties(transforms3d, $transform-support-threshold, (
    perspective-origin: $origin
  ));
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`.
// Browsers default to `flat`, mixin defaults to `preserve-3d`.
@mixin transform-style($style: preserve-3d) {
  @include prefixed-properties(transforms3d, $transform-support-threshold, (
    transform-style: $style
  ));
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`.
// Browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include prefixed-properties(transforms3d, $transform-support-threshold, (
    backface-visibility: $visibility
  ));
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers.
// These numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use. They are mainly
// here for backward-compatibility purposes.
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
// IMPORTING css3/transition

// The the user threshold for transition support. Defaults to `$graceful-usage-threshold`
$transition-support-threshold: $graceful-usage-threshold !default;


// CSS Transitions
// Currently only works in Webkit.
//
// * expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3
// * We'll be prepared.
//
// Including this submodule sets following defaults for the mixins:
//
//     $default-transition-property : all
//     $default-transition-duration : 1s
//     $default-transition-function : false
//     $default-transition-delay    : false
//
// Override them if you like. Timing-function and delay are set to false for browser defaults (ease, 0s).

$default-transition-property: all !default;

$default-transition-duration: 1s !default;

$default-transition-function: null !default;

$default-transition-delay: null !default;

$transitionable-prefixed-values: transform, transform-origin !default;



// Checks if the value given is a unit of time.
@function is-time($value) {
  @return if(type-of($value) == number, not not index(s ms, unit($value)), false);
}

// Returns `$property` with the given prefix if it is found in `$transitionable-prefixed-values`.
@function prefixed-for-transition($prefix, $property) {
  @if not $prefix {
    @return $property;
  }
  @if type-of($property) == list or type-of($property) == arglist {
    $new-list: comma-list();
    @each $v in $property {
      $new-list: append($new-list, prefixed-for-transition($prefix, $v));
    }
    @return $new-list;
  } @else {
    @if index($transitionable-prefixed-values, $property) {
      @return #{$prefix}-#{$property};
    } @else {
      @return $property;
    }
  }
}

// Returns $transition-map which includes key and values that map to a transition declaration
@function transition-map($transition) {
  $transition-map: ();

  @each $item in $transition {
    @if is-time($item) {
      @if map-has-key($transition-map, duration) {
        $transition-map: map-merge($transition-map, (delay: $item));
      } @else {
        $transition-map: map-merge($transition-map, (duration: $item));
      }
    } @else if map-has-key($transition-map, property) {
      $transition-map: map-merge($transition-map, (timing-function: $item));
    } @else {
      $transition-map: map-merge($transition-map, (property: $item));
    }
  }

  @return $transition-map;
}

// One or more properties to transition
//
// * for multiple, use a comma-delimited list
// * also accepts "all" or "none"

@mixin transition-property($properties...) {
  $properties: set-arglist-default($properties, $default-transition-property);
  @include with-each-prefix(css-transitions, $transition-support-threshold) {
    $props: if($current-prefix, prefixed-for-transition($current-prefix, $properties), $properties);
    @include prefix-prop(transition-property, $props);
  }
}

// One or more durations in seconds
//
// * for multiple, use a comma-delimited list
// * these durations will affect the properties in the same list position

@mixin transition-duration($durations...) {
  $durations: set-arglist-default($durations, $default-transition-duration);
  @include prefixed-properties(css-transitions, $transition-support-threshold, (
    transition-duration: $durations
  ));
}

// One or more timing functions
//
// * [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]
// * For multiple, use a comma-delimited list
// * These functions will effect the properties in the same list position

@mixin transition-timing-function($functions...) {
  $functions: set-arglist-default($functions, $default-transition-function);
  @include prefixed-properties(css-transitions, $transition-support-threshold, (
    transition-timing-function: $functions
  ));
}

// One or more transition-delays in seconds
//
// * for multiple, use a comma-delimited list
// * these delays will effect the properties in the same list position

@mixin transition-delay($delays...) {
  $delays: set-arglist-default($delays, $default-transition-delay);
  @include prefixed-properties(css-transitions, $transition-support-threshold, (
    transition-delay: $delays
  ));
}

// Transition all-in-one shorthand

@mixin single-transition(
  $property: $default-transition-property,
  $duration: $default-transition-duration,
  $function: $default-transition-function,
  $delay: $default-transition-delay
) {
  @include transition(compact($property $duration $function $delay));
}

@mixin transition($transitions...) {
  $default: (compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay),);
  $transitions: if(length($transitions) == 1 and type-of(nth($transitions, 1)) == list and list-separator(nth($transitions, 1)) == comma, nth($transitions, 1), $transitions);
  $transitions: set-arglist-default($transitions, $default);


  @include with-each-prefix(css-transitions, $transition-support-threshold) {
    $delays: comma-list();
    $transitions-without-delays: comma-list();
    $transitions-with-delays: comma-list();
    $has-delays: false;


    // This block can be made considerably simpler at the point in time that
    // we no longer need to deal with the differences in how delays are treated.
    @each $transition in $transitions {
      // Declare initial values for transition
      $transition: transition-map($transition);

      $property: map-get($transition, property);
      $duration: map-get($transition, duration);
      $timing-function: map-get($transition, timing-function);
      $delay: map-get($transition, delay);

      // Parse transition string to assign values into correct variables
      $has-delays: $has-delays or $delay;

      @if $current-prefix == -webkit {
        // Keep a list of delays in case one is specified
        $delays: append($delays, if($delay, $delay, 0s));
        $transitions-without-delays: append($transitions-without-delays,
          prefixed-for-transition($current-prefix, $property) $duration $timing-function);
      } @else {
        $transitions-with-delays: append($transitions-with-delays,
          prefixed-for-transition($current-prefix, $property) $duration $timing-function $delay);
      }
    }

    @if $current-prefix == -webkit {
      @include prefix-prop(transition, $transitions-without-delays);
      @if $has-delays {
        @include prefix-prop(transition-delay, $delays);
      }
    } @else if $current-prefix {
      @include prefix-prop(transition, $transitions-with-delays);
    } @else {
      transition: $transitions-with-delays;
    }
  }
}
// IMPORTING css3/appearance
// Appearance

// Change the appearance for Mozilla, Webkit and possibly the future.
// The appearance property is currently not present in any newer CSS specification.
//
// There is no official list of accepted values, but you might check these source:
//
//   * [Mozilla](https://developer.mozilla.org/en/CSS/-moz-appearance)
//   * [Webkit](http://code.google.com/p/webkit-mirror/source/browse/Source/WebCore/css/CSSValueKeywords.in?spec=svnf1aea559dcd025a8946aa7da6e4e8306f5c1b604&r=63c7d1af44430b314233fea342c3ddb2a052e365)
//     (search for 'appearance' within the page)
@mixin appearance($appearance) {
  // There is no caniuse tracking for appearance.
  $appearance: unquote($appearance);
  @include with-prefix(-moz)    {    -moz-appearance: $appearance; }
  @include with-prefix(-webkit) { -webkit-appearance: $appearance; }
}
// IMPORTING css3/animation

// The prefixed support threshold for animation.
// Defaults to the $graceful-usage-threshold.
$animation-support-threshold: $graceful-usage-threshold !default;


// Name of any animation as a string.
$default-animation-name             : null !default;

// Duration of the entire animation in seconds.
$default-animation-duration         : null !default;

// Delay for start of animation in seconds.
$default-animation-delay            : null !default;

// The timing function(s) to be used between keyframes. [ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier($number, $number, $number, $number)]
$default-animation-timing-function  : null !default;

// The number of times an animation cycle is played. [infinite | $number]
$default-animation-iteration-count  : null !default;

// Whether or not the animation should play in reverse on alternate cycles. [normal | alternate]
$default-animation-direction        : null !default;

// What values are applied by the animation outside the time it is executing. [none | forwards | backwards | both]
$default-animation-fill-mode        : null !default;

// Whether the animation is running or paused. [running | paused]
$default-animation-play-state       : null !default;


// Create a named animation sequence that can be applied to elements later.
//
//     $name    - The name of your animation.
//     @content - The keyframes of the animation.
@mixin keyframes($name, $deprecated-prefixes...) {
  $warned: warn-about-useless-prefix-arguments($deprecated-prefixes...);

  @include with-each-prefix(css-animation, $animation-support-threshold) {
    // It would be nice if we could dynamically construct directive names.
    @if $current-prefix == -moz    { @-moz-keyframes    #{$name} { @content; } }
    @if $current-prefix == -webkit { @-webkit-keyframes #{$name} { @content; } }
    @if $current-prefix == -o      { @-o-keyframes      #{$name} { @content; } }
    @if $current-prefix == -ms     { @-ms-keyframes     #{$name} { @content; } }
    @if $current-prefix == null    { @keyframes         #{$name} { @content; } }
  }
}

// @private
@mixin animation-properties($properties) {
  @include prefixed-properties(css-animation, $animation-support-threshold, $properties);
}


// Apply any number of animation names.
@mixin animation-name($name...) {
  $name: set-arglist-default($name, $default-animation-name);
  @include animation-properties((animation-name: $name));
}

// Apply any number of animation durations.
@mixin animation-duration($duration...) {
  $duration: set-arglist-default($duration, $default-animation-duration);
  @include animation-properties((animation-duration: $duration));
}

// Apply any number of animation delays.
@mixin animation-delay($delay...) {
  $delay: set-arglist-default($delay, $default-animation-delay);
  @include animation-properties((animation-delay: $delay));
}

// Apply any number of animation timing functions.
@mixin animation-timing-function($function...) {
  $function: set-arglist-default($function, $default-animation-timing-function);
  @include animation-properties((animation-timing-function: $function));
}

// Apply any number of animation iteration counts.
@mixin animation-iteration-count($count...) {
  $count: set-arglist-default($count, $default-animation-iteration-count);
  @include animation-properties((animation-iteration-count: $count));
}

// Apply any number of animation directions.
@mixin animation-direction($direction...) {
  $direction: set-arglist-default($direction, $default-animation-direction);
  @include animation-properties((animation-direction: $direction));
}

// Apply any number of animation fill modes.
@mixin animation-fill-mode($mode...) {
  $mode: set-arglist-default($mode, $default-animation-fill-mode);
  @include animation-properties((animation-fill-mode: $mode));
}

// Apply any number of animation play states.
@mixin animation-play-state($state...) {
  $state: set-arglist-default($state, $default-animation-play-state);
  @include animation-properties((animation-play-state: $state));
}

// @private
@function default-animation() {
  @return compact($default-animation-name
                  $default-animation-duration
                  $default-animation-timing-function
                  $default-animation-delay
                  $default-animation-iteration-count
                  $default-animation-direction
                  $default-animation-fill-mode
                  $default-animation-play-state);
}

// Shortcut to apply any number of animations to an element, with all the settings.
//
//     $animation... : Name and settings. [<values> | default]
@mixin animation($animation...) {
  $animation: if(length($animation) > 0, $animation, default-animation());
  @include animation-properties((animation: $animation));
}
// IMPORTING css3/regions
// Regions


// The prefixed support threshold for css regions.
// Defaults to the $graceful-usage-threshold.
$regions-support-threshold: $graceful-usage-threshold !default;


// Webkit, IE10 and future support for [CSS Regions](http://dev.w3.org/csswg/css3-regions/)
//
// $target is a value you use to link two regions of your css.
// Give the source of your content the flow-into property,
// and give your target container the flow-from property.
//
// For a visual explanation, see the diagrams at Chris Coyier's
// [CSS-Tricks](http://css-tricks.com/content-folding/)

@mixin flow-into($target) {
  $target: unquote($target);
  @include prefixed-properties(css-regions, $regions-support-threshold, (flow-into: $target));
}

@mixin flow-from($target) {
  $target: unquote($target);
  @include prefixed-properties(css-regions, $regions-support-threshold, (flow-from: $target));
}
// IMPORTING css3/hyphenation
// Mixins to support specific CSS Text Level 3 elements


// The the user threshold for hyphens support.
// Defaults to `$graceful-usage-threshold`.
$hyphens-support-threshold: $graceful-usage-threshold !default;


// Mixin for word-break properties
// http://www.w3.org/css3-text/#word-break
// * legal values for $type : normal, keep-all, break-all
//
// Example:
//    p.wordBreak {@include word-break(break-all);}
//
// Which generates:
//    p.wordBreak {
//      word-break: break-all;
//      word-break: break-word;}
//
@mixin word-break($value: normal){
  word-break: $value;
  @if $value == break-all {
    //Webkit handles break-all differently... as break-word
    @include with-prefix(-webkit) {
      word-break: break-word;
    }
  }
}

// Mixin for the hyphens property
//
// W3C specification: http://www.w3.org/TR/css3-text/#hyphens
// * legal values for $type : auto, manual, none
//
// Example:
//  p {
//    @include hyphens(auto);}
// Which generates:
//  p {
//    -moz-hyphens: auto;
//    -webkit-hyphens: auto;
//    hyphens: auto;}
//
@mixin hyphens($value: auto){
  @include prefixed-properties(css-hyphens, $hyphens-support-threshold, (
    hyphens: $value
  ));
}

// Mixin for x-browser hyphenation based on @auchenberg's post:
// Removes the need for the <wbr/> HTML tag
// http://blog.kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/
//
//  Example:
//  div {@include hyphenation;}
//
//  Which generates:
//    div {
//      -ms-word-break: break-all;
//      word-break: break-all;
//      word-break: break-word;
//      -moz-hyphens: auto;
//      -webkit-hyphens: auto;
//      hyphens: auto;}
//
@mixin hyphenation {
  @include word-break(break-all);
  @include hyphens;
}
// IMPORTING css3/filter
// Filter

// The prefixed support threshold for css filter effects.
// Defaults to the $graceful-usage-threshold.
$filter-support-threshold: $graceful-usage-threshold !default;


// Provides cross-browser support for the upcoming (?) css3 filter property.
//
// The filter argument should adhere to the standard css3 syntax
// for the filter property.
@mixin filter($filters) {
  @include prefixed-properties(css-filters, $filter-support-threshold,(
    filter: $filters
  ));
}

// @private Apply filter-margins
@mixin apply-filter-margin($position, $width) {
  @include prefixed-properties(css-filters, $filter-support-threshold,(
    filter-margin-#{$position}: $width
  ));
}

// filter-margin-top
@mixin filter-margin-top($width) { @include apply-filter-margin(top, $width); }

// filter-margin-right
@mixin filter-margin-right($width) { @include apply-filter-margin(right, $width); }

// filter-margin-bottom
@mixin filter-margin-bottom($width) { @include apply-filter-margin(bottom, $width); }

// filter-margin-left
@mixin filter-margin-left($width) { @include apply-filter-margin(left, $width); }

// filter-margin
@mixin filter-margin($widths) {
  @include prefixed-properties(css-filters, $filter-support-threshold,(
    filter-margin: $widths
  ));
}

// color-interpolation-filters (auto | sRGB | linearRGB )
@mixin color-interpolation-filters($value) {
  @include prefixed-properties(css-filters, $filter-support-threshold,(
    color-interpolation-filters: $value
  ));
}
// IMPORTING css3/user-interface
// User Interface
// This file can be expanded to handle all the user interface properties as
// they become available in browsers:
// http://www.w3.org/TR/2000/WD-css3-userint-20000216


// The prefixed support threshold for user-select.
// Defaults to the $graceful-usage-threshold.
$userselect-support-threshold: $graceful-usage-threshold !default;

// This property controls the selection model and granularity of an element.
//
// @param $select
//   [ none | text | toggle | element | elements | all | inherit ]
@mixin user-select($select) {
  $select: unquote($select);

  @include with-each-prefix(user-select-none, $userselect-support-threshold) {
    // old Firefox used a proprietary `-moz-none` value, starting with Firefox 21 `none` behaves like `-moz-none`
    // @link https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
    @include prefix-prop(user-select, if($current-prefix == -moz and $select == 'none', -moz-none, $select));
  }
}

// The prefixed support threshold for input-placeholder.
// Defaults to the $graceful-usage-threshold.
$input-placeholder-support-threshold: $graceful-usage-threshold !default;

// Style the html5 input placeholder in browsers that support it.
//
// The styles for the input placeholder are passed as mixin content
// and the selector comes from the mixin's context.
//
// For example:
//
//     #{elements-of-type(text-input)} {
//       @include input-placeholder {
//         color: #bfbfbf;
//         font-style: italic;
//       }
//     }
//
// if you want to apply the placeholder styles to all elements supporting
// the `input-placeholder` pseudo class (beware of performance impacts):
//
//     * {
//       @include input-placeholder {
//         color: #bfbfbf;
//         font-style: italic;
//       }
//     }
@mixin input-placeholder {
  @include with-each-prefix(css-placeholder, $input-placeholder-support-threshold) {
    @if $current-prefix == -webkit {
      &::-webkit-input-placeholder { @content; }
    }
    @elseif $current-prefix == -moz {
      // for Firefox 19 and below
      @if support-legacy-browser("firefox", "4", "19", $threshold: $input-placeholder-support-threshold) {
        &:-moz-placeholder { @content; }
      }
      // for Firefox 20 and above
      &::-moz-placeholder { @content; }
    }
    @elseif $current-prefix == -ms {
      &:-ms-input-placeholder { @content; }
    }
  }
  // This is not standardized yet so no official selector is generated.
}
